{"version":3,"sources":["<no source>","../../../../../src/core/styles/global/tools/_pseudo.scss","../../../toggles.css","../../../../../src/forms/styles/_tools.scss","../../../../../src/core/styles/spacing/tools/_space.scss","../../../../../src/core/styles/typography/tools/_styles.scss","../../../../../src/toggles/styles/_module.scss","../../../../../src/core/styles/spacing/tools/_position.scss","../../../../../src/core/styles/spacing/tools/_size.scss","../../../../../src/core/styles/global/misc/z-index/_tools.scss","../../../../../src/core/styles/icons/_tools.scss","../../../../../src/core/styles/global/functions/_units.scss","../../../../../src/core/styles/global/tools/_display.scss","../../../../../src/toggles/styles/modules/_variants.scss","../../../../../src/toggles/styles/modules/_group.scss","../../../../../src/core/styles/reset/tools/_lists.scss","../../../../../src/schemes/styles/tools/_element.scss","../../../../../src/core/styles/global/misc/disabled/_tools.scss","../../../../../src/core/styles/global/functions/_strings.scss","../../../../../src/toggles/styles/_schemes.scss"],"names":[],"mappings":"AAAA;;GAAA;ACUU,gBC6HV,CCxFA,yBACE,aAAc,CCoBV,YDnBiB,CCmBjB,eDlBoB,CE1BxB,gBAA6C,CAG3C,mBHjBJ,CILA,WACE,YAAa,CACb,cAAe,CCDf,iBAAU,CHwER,cFlDJ,CIZE,kBACE,aAAc,CETZ,YAAO,CAGP,aAAQ,CFQV,QAAS,CACT,oBFgBoB,CA0CpB,QEzDiB,CACjB,uBAAwB,CACxB,oBAAqB,CACrB,eJwBJ,CIhCG,sJAkBK,sEJmBR,CIrCG,kDAsBK,0BAAgC,CAChC,aAAc,CGvBpB,YP2CF,CI3CG,6BAgCG,YJeN,CIXE,kBACE,mBAAoB,CACpB,8BAAsC,CACtC,iBFnBoB,CAgClB,iBAhCkB,CCZtB,cAA6C,CAG3C,kBHyDJ,CIhCG,oFFgBG,cFoBN,CD9EU,kGK0DF,sEJwBR,CIxCG,gHFgBG,gBF4BN,CDtFU,yBKuEJ,aAAc,CACd,gBF9CkB,CE+ClB,0BAAgC,CFfhC,iBAhCkB,CAgClB,mBAhCkB,CAgClB,iBAhCkB,CCZtB,gBAA6C,CAG3C,mBAA6D,CC6D3D,oBAAqB,CACrB,eAAgB,CAChB,sBJoBN,CDpGU,wBSyDF,2BAA6B,CAC7B,iBAAkB,CAClB,yBAA8B,CAC9B,mBAAoB,CACpB,mBAAoB,CACpB,aAAc,CAahB,cC1D4C,CD4B9C,WAAqB,CE5CrB,YAAa,CAQb,kBAAa,CAIb,sBAAiB,CLjBnB,iBAAU,CAER,QAAK,CASL,MAAM,CCTJ,YAAO,CAGP,aAAQ,CFyFR,iBAAkB,CAClB,mBAAoB,CGrFxB,SPuGF,CIlHA,yBAuGI,eAAgB,CFxCd,eFwEN,CWpIC,yCAEG,OAAQ,CToER,iBFmEJ,CWzIC,kFT4DK,cSrDqB,CTqDrB,kBFkFN,CW9IC,yCAYG,6BAA8B,CTgD5B,cS/CqB,CACvB,yBXsIJ,CDlJU,gDYeJ,aAAc,CACd,OAAQ,CT0CR,oBAhCkB,CAgClB,gBAhCkB,CSPlB,gBXuIN,CW5JC,+CA0BG,SAAU,CACV,UXsIJ,CWjKC,qCA+BG,OXsIJ,CYpKA,iBCSE,ebqKF,CIvKE,kBUyCA,uCdwIF,CenKE,iED2BA,sBE8BsG,CF9BtG,4BE8BsG,CF9BtG,sCd8IF,CetKM,wKDwBJ,sBdsJF,CDrMU,yGe+CR,4Bd0JF,CelLM,yFDwBJ,sBE8BsG,CF9BtG,4BE8BsG,CF9BtG,4BdgKF,CiBnNG,0BHmDD,6BdoKF,CDnNU,yBe+CR,kBdwKF,CDvNU,wBe+CR,kBE8BsG,CF9BtG,6BE8BsG,CF9BtG,yBd8KF,CIlOA,yBUoDE,iBdkLF,CiBzME,0BHuBA,uCdsLF","file":"toggles.min.css","sourcesContent":[null,"////\n/// Core Tools : Global pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $display:null, $content:null) {\n  @if $type != after and $type != before {\n    @error '$type must be before or after element';\n  }\n  $pseudo: '::' + quote($type);\n  @at-root #{selector_append(&, $pseudo)} {\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @content;\n  }\n}\n\n@mixin before($display: null, $content: null) {\n  @include _pseudo(before, $display, $content) {\n    @content;\n  }\n}\n\n@mixin after($display: null, $content: null) {\n  @include _pseudo(after, $display, $content) {\n    @content;\n  }\n}\n","@charset \"UTF-8\";\n/* ------------------------------------ *\\\n  TOGGLES\n\\* ------------------------------------ */\n.fr-toggle .fr-hint-text {\n  display: block;\n  margin-top: 0;\n  margin-bottom: 0;\n  font-size:  0.75rem ;\n  line-height:  1.25rem ;\n}\n\n.fr-toggle {\n  display: flex;\n  flex-wrap: wrap;\n  position: relative;\n  padding: 1rem 0;\n  /*\n   * On utilise un input de type checkbox pour gérer le toggle\n   * On reset ses styles afin de ne garder que son fonctionnement et son espacement\n   * On l'utilisera égalemement pour afficher l'état du toggle (optionnel)\n   */\n  /*\n   * Import des modificateurs (séparateur et label à gauche)\n   */\n  /*\n * Passage du label ferré à gauche, le toggle ferré à droite\n */\n}\n\n.fr-toggle__input {\n  flex-shrink: 0;\n  width: 2.5rem;\n  height: 1.5rem;\n  border: 0;\n  border-radius: 2.5rem;\n  margin: 0;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  /*\n     * On applique des styles aux pseudo-elements du label quand l'input est check.\n     * On change l'ordre du texte d'état du label dans le content pour afficher\n     * la valeur correspondant à l'état checked (optionnel).\n     */\n  /*\n     * Hack pour IE11\n     */\n}\n\n.fr-toggle__input:checked ~ .fr-toggle__label[data-fr-unchecked-label]::before,\n.fr-toggle__input:checked ~ .fr-toggle__label[data-fr-checked-label]::before {\n  content: attr(data-fr-checked-label) \"\\a\" attr(data-fr-unchecked-label);\n}\n\n.fr-toggle__input:checked ~ .fr-toggle__label::after {\n  transform: translateX(1rem);\n  text-indent: 0;\n  z-index: 2000;\n}\n\n.fr-toggle__input::-ms-check {\n  display: none;\n}\n\n.fr-toggle__label {\n  display: inline-flex;\n  flex-basis: calc(100% - 2.5rem);\n  min-height: 1.5rem;\n  padding-left: 2rem;\n  font-size:  1rem ;\n  line-height:  1.5rem ;\n  /*\n     * Si les data attributes sont présents, on assigne un content au pseudo element before,\n     * et on enlève le padding left du label.\n     */\n  /*\n     * On prévoit un pseudo-élément pour afficher l'état du bouton( optionnel)\n     * On récupère le text via l'attribut [data-fr-unchecked-label]\n     */\n  /*\n     * On inclut l'icône check dans un pseudo-element after\n     * On la cache via un text-indent quand l'input n'est pas check\n     */\n}\n\n.fr-toggle__label[data-fr-unchecked-label], .fr-toggle__label[data-fr-checked-label] {\n  padding-left: 0;\n}\n\n.fr-toggle__label[data-fr-unchecked-label]::before, .fr-toggle__label[data-fr-checked-label]::before {\n  content: attr(data-fr-unchecked-label) \"\\a\" attr(data-fr-checked-label);\n}\n\n.fr-toggle__label[data-fr-unchecked-label] + .fr-hint-text, .fr-toggle__label[data-fr-checked-label] + .fr-hint-text {\n  margin-top: 0.5rem;\n}\n\n.fr-toggle__label::before {\n  flex-shrink: 0;\n  min-width: 2.5rem;\n  height: calc(1.25rem + 1px);\n  margin-top: 1.5rem;\n  margin-left: -2.5rem;\n  margin-right: 1rem;\n  font-size:  0.75rem ;\n  line-height:  1.25rem ;\n  white-space: pre-wrap;\n  overflow: hidden;\n  outline: none !important;\n}\n\n.fr-toggle__label::after {\n  font-family: icons !important;\n  font-style: normal;\n  font-weight: normal !important;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n}\n\n.fr-toggle__label::after {\n  font-size:  1rem;\n  content:  \"\";\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 1rem;\n  left: 0;\n  width: 1.5rem;\n  height: 1.5rem;\n  border-radius: 50%;\n  text-indent: -9999px;\n  z-index: 1;\n}\n\n.fr-toggle .fr-hint-text {\n  flex-basis: 100%;\n  margin-top: 1rem;\n}\n\n.fr-toggle--label-left .fr-toggle__input {\n  order: 1;\n  margin: 0 0 0 auto;\n}\n\n.fr-toggle--label-left .fr-toggle__input[data-fr-checked-label] ~ .fr-toggle__label {\n  padding-left: 0;\n  padding-right: 1rem;\n}\n\n.fr-toggle--label-left .fr-toggle__label {\n  justify-content: space-between;\n  padding-left: 0;\n  width: calc(100% - 2.5rem);\n}\n\n.fr-toggle--label-left .fr-toggle__label::before {\n  flex-shrink: 0;\n  order: 1;\n  margin-right: -2.5rem;\n  margin-left: 1rem;\n  text-align: right;\n}\n\n.fr-toggle--label-left .fr-toggle__label::after {\n  left: auto;\n  right: 1rem;\n}\n\n.fr-toggle--label-left .fr-hint-text {\n  order: 2;\n}\n\n/*\n * Provisoire: à enlever quand fr-body sera en place\n */\n/*\n * On surcharge les styles de base (provisoire)\n */\n.fr-toggle__list {\n  --is-list: false;\n}\n\n.fr-toggle {\n  /*\n  * Ajout d'un séparateur\n  */\n}\n\n.fr-toggle__input {\n  box-shadow: inset 0 0 0 1px var(--bf500);\n}\n\ninput.fr-toggle__input[disabled], input.fr-toggle__input:disabled {\n  color: var(--g600-g400);\n  background-color: var(--g200);\n  box-shadow: inset 0 0 0 1px var(--g400);\n}\n\ninput.fr-toggle__input[disabled] + label, input.fr-toggle__input:disabled + label {\n  color: var(--g600-g400);\n}\n\ninput.fr-toggle__input[disabled] + label::before, input.fr-toggle__input:disabled + label::before {\n  color: var(--g600-g400);\n}\n\ninput.fr-toggle__input[disabled] + label::before::before, input.fr-toggle__input:disabled + label::before::before {\n  background-color: var(--g200);\n}\n\ninput.fr-toggle__input[disabled] + label::after, input.fr-toggle__input:disabled + label::after {\n  color: var(--g600-g400);\n  background-color: var(--g200);\n  border: 1px solid var(--g400);\n}\n\n.fr-toggle__input:checked {\n  background-color: var(--bf500);\n}\n\n.fr-toggle__label::before {\n  color: var(--bf500);\n}\n\n.fr-toggle__label::after {\n  color: var(--bf500);\n  border: 1px solid var(--bf500);\n  background-color: var(--w);\n}\n\n.fr-toggle .fr-hint-text {\n  color: var(--g600);\n}\n\n.fr-toggle--border-bottom {\n  box-shadow: inset 0 -1px 0 0 var(--g300);\n}\n","////\n/// Forms Tools\n/// @group forms\n////\n\n/// Mixin pour gérer l'état disabled avec sur un champ input avec un box-shadow\n///\n/// @access public\n///\n/// @param {String} $element [input]\n///\n/// @example scss - On ajoute un style disabled sur un élément de type input\n///   .foo {\n///     @include disabled-form-field(input);\n///   }\n@mixin disabled-form-field($element:input) {\n  @at-root #{selector_unify(&, $element)} {\n    @include disabled(true, false, inset 0 -2px 0 0 $COLOR) {\n      /**\n       * Override de l'opacité chrome sur un élément disabled\n       */\n      opacity: 1;\n      @content;\n    }\n  }\n}\n\n/// Mixin pour gérer l'état disabled sur un label et les pseudo-elements before et after, l'input étant masqué\n///\n/// @access public\n///\n/// @example scss - On ajoute un style disabled sur le label et ses pseudo-elements\n///   .foo {\n///     @include disabled-form-choice();\n///   }\n@mixin disabled-form-choice() {\n  @at-root #{selector_unify(&, input)} {\n    @include disabled(true, false, false, '+ label') {\n      &::before {\n        @include disabled-colors(false, true, border);\n      }\n      @content;\n    }\n  }\n}\n\n/// Placeholder pour les textes d'aide\n%hint-text {\n  display: block;\n  @include margin-top(0);\n  @include margin-bottom(0);\n  @include text-style(xs);\n}\n","////\n/// Core Tools : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  $v: quote($value);\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * 0.25rem;\n  }\n  @else if is-unit($value, w) {\n    @return $q * 0.5rem;\n  }\n  @return unquote($value);\n}\n\n/// Set space property\n///\n/// @param {String} $property [\"margin\"] - propriété à appliquer à l'espacement `[\"margin\", \"padding\"]`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `[\"x\", \"y\", \"top\", \"right\", \"bottom\", \"left\"]`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing(\"margin\", 6v, \"bottom\");\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n\n  @if $direction != null {\n    $v: space($value);\n\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    $spaces: ();\n\n    @each $v in $value {\n      $spaces: append($spaces, space($v));\n    }\n\n    #{$property}: $spaces;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Tools : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} #{px-rem($font-size)} #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin(map-get($settings, margin));\n}\n\n@mixin _space-title($settings) {\n  @include margin(map-get($settings, margin));\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-text($settings);\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-title($settings);\n  }\n}\n","////\n/// Toggles Module\n/// @group toggles\n////\n\n#{ns(toggle)} {\n  display: flex;\n  flex-wrap: wrap;\n  @include relative;\n  @include padding(4v 0);\n\n  /*\n   * On utilise un input de type checkbox pour gérer le toggle\n   * On reset ses styles afin de ne garder que son fonctionnement et son espacement\n   * On l'utilisera égalemement pour afficher l'état du toggle (optionnel)\n   */\n  &__input {\n    flex-shrink: 0;\n    @include size(10v, 6v);\n    border: 0;\n    border-radius: space(10v);\n    @include margin(0);\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n\n    /*\n     * On applique des styles aux pseudo-elements du label quand l'input est check.\n     * On change l'ordre du texte d'état du label dans le content pour afficher\n     * la valeur correspondant à l'état checked (optionnel).\n     */\n    &:checked {\n      ~ .#{$prefix}-toggle__label[data-#{$prefix}-unchecked-label]::before,\n      ~ .#{$prefix}-toggle__label[data-#{$prefix}-checked-label]::before {\n        content: attr(data-#{$prefix}-checked-label) '\\A' attr(data-#{$prefix}-unchecked-label);\n      }\n\n      ~ .#{$prefix}-toggle__label::after {\n        transform: translateX(space(4v));\n        text-indent: 0;\n        @include z-index(focus);\n      }\n    }\n\n    /*\n     * Hack pour IE11\n     */\n    &::-ms-check {\n      display: none;\n    }\n  }\n\n  &__label {\n    display: inline-flex;\n    flex-basis: calc(100% - #{space(10v)});\n    min-height: space(6v);\n    @include padding-left(8v);\n    @include text-style(md);\n\n    /*\n     * Si les data attributes sont présents, on assigne un content au pseudo element before,\n     * et on enlève le padding left du label.\n     */\n    &[data-#{$prefix}-unchecked-label],\n    &[data-#{$prefix}-checked-label] {\n      @include padding-left(0);\n\n      @include before {\n        content: attr(data-#{$prefix}-unchecked-label) '\\A' attr(data-#{$prefix}-checked-label);\n      }\n\n      + .#{$prefix}-hint-text {\n        @include margin-top(2v);\n      }\n    }\n\n    /*\n     * On prévoit un pseudo-élément pour afficher l'état du bouton( optionnel)\n     * On récupère le text via l'attribut [data-fr-unchecked-label]\n     */\n    @include before {\n      flex-shrink: 0;\n      min-width: space(10v);\n      height: calc(#{space(5v)} + 1px);\n      @include margin-top(6v);\n      @include margin-left(-10v);\n      @include margin-right(4v);\n      @include text-style(xs);\n      white-space: pre-wrap;\n      overflow: hidden;\n      outline: none !important;\n    }\n\n    /*\n     * On inclut l'icône check dans un pseudo-element after\n     * On la cache via un text-indent quand l'input n'est pas check\n     */\n    @include font-icon(check-line, sm, after) {\n      @include display-flex(null,center,center);\n      @include absolute(4v, null, null, 0, 6v, 6v);\n      border-radius: 50%;\n      text-indent: -9999px;\n      @include z-index(over);\n    }\n  }\n\n  #{ns(hint-text)} {\n    @extend %hint-text;\n    flex-basis: 100%;\n    @include margin-top(4v);\n  }\n\n  /*\n   * Import des modificateurs (séparateur et label à gauche)\n   */\n  @import 'modules/variants';\n}\n\n/*\n * Provisoire: à enlever quand fr-body sera en place\n */\n@import 'modules/group';\n","////\n/// Core Tools : Global position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n","////\n/// Core Tools : Global size\n/// @group core\n////\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Core Tools : Global z-index\n/// @group core\n////\n\n/// Fonction de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@function z-index($index-name) {\n  @return map-get($z-indexes, $index-name);\n}\n\n/// Mixin de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@mixin z-index($index-name, $focus: false) {\n  z-index: z-index($index-name);\n  @if $focus {\n    $focus-z-index: z-index($index-name + '-focus');\n\n    @if $focus-z-index != null {\n      *:focus,\n      *:focus-visible {\n        z-index: #{$focus-z-index};\n      }\n    }\n  }\n}\n","////\n/// Core Tools : Icons\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size [\"md\"] - Icon size from `$icon-size-map` (Default to \"md\" = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icons-size(sm);\n///     height: icons-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@mixin custom-icons($icon-size:md) {\n  @include has-icon {\n    @include font-icon(null, $icon-size) {\n      @content;\n    }\n  }\n}\n\n$icons-placeholders-generated: false !global;\n\n@mixin generate-icons-placeholder($icons) {\n  @if $icons-placeholders-generated != true {\n    @at-root {\n      @each $icon, $code in $icons {\n        %#{$icon} {\n          content: \"#{$code}\";\n        }\n      }\n    }\n\n    $icons-placeholders-generated: true !global;\n  }\n}\n\n@mixin generate-icons-content($icons) {\n  @include generate-icons-placeholder($icons-settings);\n  @each $icon, $code in $icons {\n    #{ns('fi-' + $icon)} {\n      @include before {\n        @extend %#{$icon};\n      }\n    }\n  }\n}\n\n@mixin font-icon-content($icon, $prepend: '') {\n  @include generate-icons-placeholder($icons-settings);\n  @if $prepend {\n    content: #{$prepend} \"#{map-get($icons-settings, $icon)}\";\n  }\n  @else {\n    @extend %#{$icon};\n  }\n}\n\n$has-font-icon: false !global;\n@mixin font-icon-placeholder() {\n  @if $has-font-icon != true {\n    @at-root {\n      %font-icon {\n        font-family: icons !important;\n        font-style: normal;\n        font-weight: normal !important;\n        font-variant: normal;\n        text-transform: none;\n        line-height: 1;\n      }\n      $has-font-icon: true !global;\n    }\n  }\n}\n\n@mixin font-icon($icon:null, $icon-size:md, $pseudo:before, $prepend: '') {\n  @include font-icon-placeholder();\n  @include _pseudo($pseudo) {\n    @extend %font-icon;\n\n    @if $icon-size != null {\n      font-size: #{$prepend} icon-size($icon-size);\n    }\n\n    @if $icon != null {\n      @include font-icon-content($icon, $prepend);\n    }\n\n    @content;\n  }\n}\n","////\n/// Core Tools : Global units\n/// @group core\n////\n\n/// Retourne la valeur numérique sans unité.\n/// @access public\n/// @param {String} $value - la valeur avec unité\n/// @example\n///   clean-unit(12px);\n@function clean-unit($value) {\n  @if $value == null {\n    @return null;\n  }\n  @return ($value / ($value * 0 + 1));\n}\n\n/// Return rem from px\n///\n/// @param {String} $px - Font size in pixels\n/// @param {String} $root-font-size [$base-font-size-px] - Pixel font size for conversion\n///\n/// @example scss - Get 1rem conversion from 16px, using $base-font-size-px\n///   .foo {\n///     font-size: px-rem(12px);\n///   }\n@function px-rem($px, $root-font-size: 16px) {\n  @return clean-unit($px / $root-font-size) * 1rem;\n}\n\n@function is-unit($value, $unit) {\n  $v: to-lower-case(quote($value));\n  $u: quote($unit);\n  @return str-index($v, $u) == (str-length($v) - str-length($u) + 1);\n}\n\n@function is-basic-unit($value) {\n  $units: em ex '%' px cm mm in pt pc ch rem vw vh vmin vmax;\n  @each $unit in $units {\n    @if is-unit($value, $unit) {\n      @return true;\n    }\n  }\n  @return false;\n}\n","////\n/// Core Tools : Global display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n\n%inline-flex-center {\n  @include display-flex(row, center, null, null, true);\n}\n","////\n/// Toggles Module : Variants\n/// @group toggles\n////\n\n/*\n * Passage du label ferré à gauche, le toggle ferré à droite\n */\n&--label-left {\n  .#{$prefix}-toggle__input {\n    order: 1;\n    @include margin(0 0 0 auto);\n  }\n\n  .#{$prefix}-toggle__input[data-#{$prefix}-checked-label] ~ .#{$prefix}-toggle__label {\n    @include padding-left(0);\n    @include padding-right(4v);\n  }\n\n  .#{$prefix}-toggle__label {\n    justify-content: space-between;\n    @include padding-left(0);\n    width: calc(100% - #{space(10v)});\n\n    @include before {\n      flex-shrink: 0;\n      order: 1;\n      @include margin-right(-10v);\n      @include margin-left(4v);\n      text-align: right;\n    }\n  }\n\n  .#{$prefix}-toggle__label::after {\n    left: auto;\n    right: space(4v);\n  }\n\n  .#{$prefix}-hint-text {\n    order: 2;\n  }\n}\n","////\n/// Toggles Module : Group\n/// @group toggles\n////\n\n/*\n * On surcharge les styles de base (provisoire)\n */\n\n#{ns(toggle)}__list {\n  @include disable-list-style;\n}\n","////\n/// Core Tools : Reset list\n/// @group core\n////\n\n%list-reset {\n  list-style-type: none;\n  margin-block-start: 0;\n  margin-block-end: 0;\n  padding-inline-start: 0;\n  padding-inline-end: 0;\n}\n\n@mixin enable-list-style() {\n  --is-list: ;\n}\n\n@mixin disable-list-style() {\n  --is-list: false;\n}\n\n@mixin remove-list-style($nested: false) {\n  @include padding-bottom(0);\n\n  & > li {\n    @include padding-bottom(0);\n    @include before(none, none) {\n      font-size: inherit;\n      font-weight: inherit;\n    }\n\n    @if $nested {\n      & > ol,\n      & > ul {\n        @include padding-top(0);\n        @include padding-left(0);\n\n        & > li {\n          @include text-style(md);\n          @include before {\n            @include padding-right(0);\n            font-size: inherit;\n          }\n        }\n      }\n    }\n  }\n}\n","////\n/// Schemes Module : Element\n/// @group schemes\n////\n\n/// map des transitions par élément\n/// @type map\n$scheme-elements-transitions:() !global;\n\n/// Ajout d'une combinaison de couleur sur un élément pour un propriété donnée\n/// @access private\n/// @param {String} $set-name - nom de la combinaison comme défini dans settings/sets\n/// @@param {String} $prop - propriété affectée\n/// @param {Bool | String} $transition - objet auqel la transition de couleur est associée\n/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)\n/// @param {String | list}  $value - la valeur appliquée à la propriété. la variable $COLOR est remplacée par la custom property de la combinaison de couleur\n/// @param {String}  $element - le sélécteur de l'élément\n\n@mixin _scheme-element($set-name, $prop, $transition:false, $hover:false, $value:$COLOR, $element:&) {\n  // hover\n  @if $hover != false {\n    $set: map_get($scheme-sets, $set-name);\n    $light: _scheme-set-color($set, light);\n    $dark: _scheme-set-color($set, dark);\n\n    @at-root {\n      @if $hover != override {\n        #{$element} {\n          @include _scheme-element-hover();\n        }\n      }\n\n      #{$not-dark-theme-selector} {\n        #{$element} {\n          @include _get-hover-vars($light);\n        }\n\n        $i: 0;\n        @each $type, $variation in $scheme-blocks {\n          $i: ($i + 1);\n\n          [class*=\"#{$base-scheme}-#{$type}\"],\n          [class*=\"--scheme-#{$type}-\"] {\n            #{$element} {\n              @include _get-hover-vars(_scheme-set-color($set, $type));\n            }\n          }\n        }\n      }\n\n      #{$dark-theme-selector} #{$element} {\n        @include _get-hover-vars($dark);\n      }\n    }\n  }\n\n  // le $COLOR de la valeur est remplacé par la custom property de la couleur\n  #{$prop}: _replace_color($value, var(--#{$set-name}), false);\n\n  // transitions\n  @if $transition != false and $theme-allow-transition != false {\n    @if $transition == true {\n      $transition: $element;\n    }\n\n    $transitions:map_get($scheme-elements-transitions, $transition);\n    @if $transitions == null {\n      $transitions:();\n    }\n\n    $transitions:append($transitions, $prop $theme-transition-duration, $separator: comma);\n    $scheme-elements-transitions:map_merge($scheme-elements-transitions, ($transition:$transitions)) !global;\n\n    @include _theme-transition() {\n      transition: $transitions;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String} $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)\n@mixin scheme-element-bg-color($set-name, $transition:false, $hover:false) {\n  @include _scheme-element($set-name, background-color, $transition, $hover);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n@mixin scheme-element-text-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, color, $transition);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n@mixin scheme-element-fill-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, fill, $transition);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {String} $side - le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($set-name, $transition:false, $side:null, $value:1px solid $COLOR) {\n  $prop:border;\n  @if $side != null {\n    $prop:border-#{$side};\n  }\n  @include _scheme-element($set-name, $prop, $transition, false, $value);\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($set-name, $transition:false, $value:1px solid $COLOR) {\n  @include _scheme-element($set-name, outline, $transition, false, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($set-name, $transition:false, $value:inset 0 0 0 1px $COLOR) {\n  @include _scheme-element($set-name, box-shadow, $transition, false, $value);\n}\n","////\n/// Core Tools : Global disabled\n/// @group core\n////\n\n@function get-disabled-color($type) {\n  @return map_get($disabled-color-sets, $type);\n}\n\n@mixin disabled-colors($text:true, $background:false, $box-shadow-border: false) {\n  @if $text {\n    @include scheme-element-text-color(get-disabled-color(text));\n  }\n\n  @if $background {\n    @include scheme-element-bg-color(get-disabled-color(background));\n  }\n\n  @if $box-shadow-border == true {\n    @include scheme-element-box-shadow-color(get-disabled-color(border));\n  }\n  @else if $box-shadow-border == border {\n    @include scheme-element-border-color(get-disabled-color(border));\n  }\n  @else if $box-shadow-border != false {\n    @include scheme-element-box-shadow-color(get-disabled-color(border), false, $box-shadow-border);\n  }\n}\n\n@mixin disabled($text:true, $background:false, $box-shadow-border: false, $descendant:null) {\n  &[disabled],\n  &:disabled {\n    @if $descendant != null {\n      #{$descendant} {\n        @include disabled-colors($text, $background, $box-shadow-border);\n        @content;\n      }\n    }\n    @else {\n      @include disabled-colors($text, $background, $box-shadow-border);\n      @content;\n    }\n  }\n}\n","////\n/// Core Tools : Global strings\n/// @group core\n////\n\n@function _pow10($exponent) {\n  @if $exponent == 0 {\n    @return 1;\n  }\n  $result: 1;\n  @for $i from 1 through $exponent {\n    $result: $result * 10;\n  }\n  @return $result;\n}\n\n/// Fonction de transformation d'une string en nombre intégral\n/// @access public\n/// @param {String} $value - le nombre en chaîne de caractères\n@function str-to-num($value) {\n  $length: str-length($value);\n  $int: ();\n  $float: ();\n  $floating: false;\n  $neg: false;\n\n  @for $i from 1 through $length {\n    $n: str-slice($value, $i, $i);\n\n    @if $n == '.' {\n      $floating: true;\n    }\n    @else if $n == '-' {\n      $neg: true;\n    }\n    @else {\n      @for $d from 0 through 9 {\n        @if quote($d) == $n {\n          @if $floating {\n            $float: append($float, $d);\n          }\n          @else {\n            $int: append($int, $d);\n          }\n        }\n      }\n    }\n  }\n\n  $result: 0;\n\n  $length: length($int);\n  @if $length > 0 {\n    @for $i from 1 through $length {\n      $result: $result + (nth($int, $i) * _pow10($length - $i));\n    }\n  }\n\n  $length: length($float);\n  @if $length > 0 {\n    @for $i from 1 through $length {\n      $result: $result + (nth($float, $i) / _pow10($i));\n    }\n  }\n\n  @if $neg {\n    @return -$result;\n  }\n  @else {\n    @return $result;\n  }\n}\n\n/// Remplacement dans une chaine de caractères\n/// @access public\n/// @param {String} $stack - chaine de caractère où chercher\n/// @param {String} $needle - élément à chercher\n/// @param {String} $content - élément de remplacement\n/// @return {String} la chaîne de caractères transformée\n@function str-replace($stack, $needle, $content) {\n  $is:quote($stack);\n  $in:quote($needle);\n  $ic:quote($content);\n\n  $i:str-index($is, $in);\n\n  @while $i != null {\n    $is:unquote(str_slice($is, 1, $i - 1) + $ic + str_slice($is, $i + str-length($in), str_length($is)));\n    $i:str-index($is, $in);\n  }\n\n  @return unquote($is);\n}\n\n/// Découpage d'une chaine de caractères avec un séparateur particulier\n/// @access public\n/// @param {String} $string - chaine de caractère à découper\n/// @param {String} $separator - séparateur\n@function str-split($string, $separator:',') {\n  $tmp: str-slice($string, 1);\n  $list: ();\n  $index: str-index($string, $separator);\n\n  @if $index == null {\n    $list: ($string);\n  }\n  @else {\n    $list: join((str-slice($string, 1, $index - 1)), str-split(str-slice($string, $index + 1), $separator));\n  }\n  @return $list;\n}\n","////\n/// Toggles Schemes\n/// @group toggles\n////\n\n#{ns(toggle)} {\n  &__input {\n    @include scheme-element-box-shadow-color(bf500, false, inset 0 0 0 1px $COLOR);\n    @include disabled-toggle-choice();\n\n    &:checked {\n      @include scheme-element-bg-color(bf500);\n    }\n  }\n\n  &__label {\n    @include before {\n      @include scheme-element-text-color(bf500);\n    }\n\n    @include after {\n      @include scheme-element-text-color(bf500);\n      @include scheme-element-border-color(bf500);\n      @include scheme-element-bg-color(w);\n    }\n  }\n\n  #{ns(hint-text)} {\n    @include scheme-element-text-color(g600, true);\n  }\n\n  /*\n  * Ajout d'un séparateur\n  */\n  &--border-bottom {\n    @include scheme-element-box-shadow-color(g300, false, inset 0 -1px 0 0 $COLOR);\n  }\n}\n"]}