{"version":3,"sources":["<no source>","../../../../../src/inputs/styles/_module.scss","../../../../../src/core/styles/spacing/tools/_size.scss","../../../../../src/core/styles/typography/tools/_styles.scss","../../../../../src/core/styles/spacing/tools/_space.scss","../../../inputs.css","../../../../../src/inputs/styles/_tools.scss","../../../../../src/core/styles/spacing/tools/_position.scss","../../../../../src/core/styles/global/tools/_pseudo.scss","../../../../../src/core/styles/icons/_tools.scss","../../../../../src/core/styles/global/functions/_units.scss","../../../../../src/core/styles/global/misc/z-index/_settings.scss","../../../../../src/inputs/styles/_schemes.scss","../../../../../src/schemes/styles/tools/_element.scss","../../../../../src/core/styles/global/functions/_strings.scss","../../../../../src/core/styles/global/misc/disabled/_tools.scss","../../../../../src/forms/styles/_tools.scss"],"names":[],"mappings":"AAAA;;GAAA;ACKA,UACE,aAAc,CCEV,UAAO,CDAX,QAAS,CACT,+BAAsC,CEetC,cAA6C,CAG3C,kBAA6D,CCmD7D,kBA1CoB,CHxBtB,uBAAwB,CACxB,oBAAqB,CACrB,eIQF,CCLE,qCLGE,SAAU,CACV,iBIMJ,CCRE,uDLCE,SAAU,CACV,iBIgBJ,CCjBE,gCLAE,SAAU,CACV,iBIqBJ,CJrCA,wBAuBI,iBIkBJ,CJzCA,qBA2BI,iBIkBJ,CJ7CA,wDA8BM,YImBN,CJXA,eMrCE,iBAAU,CNuCV,aIiBF,CGpDU,6ECyDF,2BAA6B,CAC7B,iBAAkB,CAClB,yBAA8B,CAC9B,mBAAoB,CACpB,mBAAoB,CACpB,aAAc,CAahB,cC1D4C,CHrBhD,iBAAU,CAER,UAAK,CAGL,YAAO,CAGP,aAAQ,CHgER,WCPJ,CJ5BA,2FAYQ,aAAc,CGahB,kBAhCkB,CHqBhB,SU9CC,CV+CD,SI6BR,CJ5CA,yBGyBM,oBCuBN,COtFA,kBCoDE,gCC8BsG,CFhFtG,kBPyFF,CJ3FA,UYoDE,iBC8BsG,CD9BtG,4BC8BsG,CD9BtG,uCR6DF,CCrGE,qCOwCA,sBRiEF,CCvGE,uDOsCA,sBRyEF,CC9GE,gCOqCA,sBR6EF,CUxGE,iDF2BA,sBC8BsG,CD9BtG,uCC8BsG,CElElG,SX0HN,COjHE,iBC2BA,0CR0FF,CO9GE,iBCoBA,wCR8FF,CO7IA,6FC+CE,wCC8BsG,CD9BtG,mCRmGF","file":"inputs.min.css","sourcesContent":[null,"////\n/// Inputs Module\n/// @group inputs\n////\n\n#{ns(input)} {\n  display: block;\n  @include size(100%);\n  border: 0;\n  border-radius: space(1v) space(1v) 0 0;\n  @include text-style(md);\n  @include padding(2v 4v);\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n\n  /**\n   * Style du placeholder\n   */\n  @include placeholder {\n    opacity: 1;\n    font-style: italic;\n  }\n\n  /**\n   * On applique une hauteur maximale si l'élément n'est pas un textarea\n   */\n  &:not(textarea) {\n    max-height: 2.5rem;\n  }\n\n  &[type=date] {\n    min-height: 2.5rem;\n\n    &::-webkit-calendar-picker-indicator {\n      display: none;\n    }\n  }\n}\n\n/**\n * Ajout d'un wrapper quand on a besoin de mettre une icône\n */\n#{ns(input-wrap)} {\n  @include relative;\n  display: block;\n\n  @include custom-icons(sm) {\n    @include absolute(3v, 3v, 3v);\n    @include margin(auto);\n  }\n\n  &#{ns(fi-calendar-line)} {\n    > #{ns(input)}[type=date] {\n      &::-webkit-calendar-picker-indicator {\n        display: block;\n        @include margin-right(-8v);\n        z-index: z-index(over);\n        opacity: 0;\n      }\n    }\n  }\n\n  #{ns(input)} {\n    @include padding-right(10v);\n  }\n}\n","////\n/// Core Tools : Global size\n/// @group core\n////\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Core Tools : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} #{px-rem($font-size)} #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin(map-get($settings, margin));\n}\n\n@mixin _space-title($settings) {\n  @include margin(map-get($settings, margin));\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-text($settings);\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-title($settings);\n  }\n}\n","////\n/// Core Tools : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  $v: quote($value);\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * 0.25rem;\n  }\n  @else if is-unit($value, w) {\n    @return $q * 0.5rem;\n  }\n  @return unquote($value);\n}\n\n/// Set space property\n///\n/// @param {String} $property [\"margin\"] - propriété à appliquer à l'espacement `[\"margin\", \"padding\"]`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `[\"x\", \"y\", \"top\", \"right\", \"bottom\", \"left\"]`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing(\"margin\", 6v, \"bottom\");\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n\n  @if $direction != null {\n    $v: space($value);\n\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    $spaces: ();\n\n    @each $v in $value {\n      $spaces: append($spaces, space($v));\n    }\n\n    #{$property}: $spaces;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","@charset \"UTF-8\";\n/* ------------------------------------ *\\\n  INPUTS\n\\* ------------------------------------ */\n/* stylelint-disable */\n.fr-input {\n  display: block;\n  width: 100%;\n  border: 0;\n  border-radius: 0.25rem 0.25rem 0 0;\n  font-size:  1rem ;\n  line-height:  1.5rem ;\n  padding: 0.5rem 1rem;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  /**\n   * Style du placeholder\n   */\n  /**\n   * On applique une hauteur maximale si l'élément n'est pas un textarea\n   */\n}\n\n.fr-input::-webkit-input-placeholder {\n  opacity: 1;\n  font-style: italic;\n}\n\n.fr-input:-moz-placeholder {\n  opacity: 1;\n  font-style: italic;\n}\n\n.fr-input::-moz-placeholder {\n  opacity: 1;\n  font-style: italic;\n}\n\n.fr-input:-ms-input-placeholder {\n  opacity: 1;\n  font-style: italic;\n}\n\n.fr-input:not(textarea) {\n  max-height: 2.5rem;\n}\n\n.fr-input[type=date] {\n  min-height: 2.5rem;\n}\n\n.fr-input[type=date]::-webkit-calendar-picker-indicator {\n  display: none;\n}\n\n/**\n * Ajout d'un wrapper quand on a besoin de mettre une icône\n */\n.fr-input-wrap {\n  position: relative;\n  display: block;\n}\n\n.fr-input-wrap[class^=\"fr-fi-\"]::before, .fr-input-wrap[class*=\" fr-fi-\"]::before {\n  font-family: icons !important;\n  font-style: normal;\n  font-weight: normal !important;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n}\n\n.fr-input-wrap[class^=\"fr-fi-\"]::before, .fr-input-wrap[class*=\" fr-fi-\"]::before {\n  font-size:  1rem;\n  position: absolute;\n  top: 0.75rem;\n  right: 0.75rem;\n  bottom: 0.75rem;\n  margin: auto;\n}\n\n.fr-input-wrap.fr-fi-calendar-line > .fr-input[type=date]::-webkit-calendar-picker-indicator {\n  display: block;\n  margin-right: -2rem;\n  z-index: 1;\n  opacity: 0;\n}\n\n.fr-input-wrap .fr-input {\n  padding-right: 2.5rem;\n}\n\ntextarea.fr-input {\n  box-shadow: 0 2px 0 0 var(--g600);\n  min-height: 3.75rem;\n}\n\n.fr-input {\n  color: var(--g800);\n  background-color: var(--g200);\n  box-shadow: inset 0 -2px 0 0 var(--g600);\n  /**\n   * Style du placeholder\n   */\n  /**\n   * Style pour l'input désactivé\n   */\n  /**\n   * Modificateur pour les champs validés\n   */\n  /**\n   * Modificateur pour les champs présentant des erreurs\n   */\n  /**\n   * On applique un style lorsque la valeur est automatiquement remplie par le navigateur\n   * sur les navigateurs webkit.\n   */\n}\n\n.fr-input::-webkit-input-placeholder {\n  color: var(--g600-g400);\n}\n\n.fr-input:-moz-placeholder {\n  color: var(--g600-g400);\n}\n\n.fr-input::-moz-placeholder {\n  color: var(--g600-g400);\n}\n\n.fr-input:-ms-input-placeholder {\n  color: var(--g600-g400);\n}\n\ninput.fr-input[disabled], input.fr-input:disabled {\n  color: var(--g600-g400);\n  box-shadow: inset 0 -2px 0 0 var(--g400);\n  /**\n       * Override de l'opacité chrome sur un élément disabled\n       */\n  opacity: 1;\n}\n\n.fr-input--valid {\n  box-shadow: inset 0 -2px 0 0 var(--success);\n}\n\n.fr-input--error {\n  box-shadow: inset 0 -2px 0 0 var(--error);\n}\n\n.fr-input:-webkit-autofill, .fr-input:-webkit-autofill:hover, .fr-input:-webkit-autofill:focus {\n  box-shadow: inset 0 0 0 100px var(--g200);\n  -webkit-text-fill-color: var(--g800);\n}\n","////\n/// Inputs Tools\n/// @group inputs\n////\n\n/* stylelint-disable */\n/// Mixin pour ajouter les préfixes vendor du placeholder\n///\n/// @access public\n///\n/// @example scss\n///   .foo {\n///     @include placeholder {\n///       @content;\n///     }\n///   }\n@mixin placeholder {\n  &::-webkit-input-placeholder {@content;}\n  &:-moz-placeholder           {@content;}\n  &::-moz-placeholder          {@content;}\n  &:-ms-input-placeholder      {@content;}\n}\n","////\n/// Core Tools : Global position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n","////\n/// Core Tools : Global pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $display:null, $content:null) {\n  @if $type != after and $type != before {\n    @error '$type must be before or after element';\n  }\n  $pseudo: '::' + quote($type);\n  @at-root #{selector_append(&, $pseudo)} {\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @content;\n  }\n}\n\n@mixin before($display: null, $content: null) {\n  @include _pseudo(before, $display, $content) {\n    @content;\n  }\n}\n\n@mixin after($display: null, $content: null) {\n  @include _pseudo(after, $display, $content) {\n    @content;\n  }\n}\n","////\n/// Core Tools : Icons\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size [\"md\"] - Icon size from `$icon-size-map` (Default to \"md\" = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icons-size(sm);\n///     height: icons-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@mixin custom-icons($icon-size:md) {\n  @include has-icon {\n    @include font-icon(null, $icon-size) {\n      @content;\n    }\n  }\n}\n\n$icons-placeholders-generated: false !global;\n\n@mixin generate-icons-placeholder($icons) {\n  @if $icons-placeholders-generated != true {\n    @at-root {\n      @each $icon, $code in $icons {\n        %#{$icon} {\n          content: \"#{$code}\";\n        }\n      }\n    }\n\n    $icons-placeholders-generated: true !global;\n  }\n}\n\n@mixin generate-icons-content($icons) {\n  @include generate-icons-placeholder($icons-settings);\n  @each $icon, $code in $icons {\n    #{ns('fi-' + $icon)} {\n      @include before {\n        @extend %#{$icon};\n      }\n    }\n  }\n}\n\n@mixin font-icon-content($icon, $prepend: '') {\n  @include generate-icons-placeholder($icons-settings);\n  @if $prepend {\n    content: #{$prepend} \"#{map-get($icons-settings, $icon)}\";\n  }\n  @else {\n    @extend %#{$icon};\n  }\n}\n\n$has-font-icon: false !global;\n@mixin font-icon-placeholder() {\n  @if $has-font-icon != true {\n    @at-root {\n      %font-icon {\n        font-family: icons !important;\n        font-style: normal;\n        font-weight: normal !important;\n        font-variant: normal;\n        text-transform: none;\n        line-height: 1;\n      }\n      $has-font-icon: true !global;\n    }\n  }\n}\n\n@mixin font-icon($icon:null, $icon-size:md, $pseudo:before, $prepend: '') {\n  @include font-icon-placeholder();\n  @include _pseudo($pseudo) {\n    @extend %font-icon;\n\n    @if $icon-size != null {\n      font-size: #{$prepend} icon-size($icon-size);\n    }\n\n    @if $icon != null {\n      @include font-icon-content($icon, $prepend);\n    }\n\n    @content;\n  }\n}\n","////\n/// Core Tools : Global units\n/// @group core\n////\n\n/// Retourne la valeur numérique sans unité.\n/// @access public\n/// @param {String} $value - la valeur avec unité\n/// @example\n///   clean-unit(12px);\n@function clean-unit($value) {\n  @if $value == null {\n    @return null;\n  }\n  @return ($value / ($value * 0 + 1));\n}\n\n/// Return rem from px\n///\n/// @param {String} $px - Font size in pixels\n/// @param {String} $root-font-size [$base-font-size-px] - Pixel font size for conversion\n///\n/// @example scss - Get 1rem conversion from 16px, using $base-font-size-px\n///   .foo {\n///     font-size: px-rem(12px);\n///   }\n@function px-rem($px, $root-font-size: 16px) {\n  @return clean-unit($px / $root-font-size) * 1rem;\n}\n\n@function is-unit($value, $unit) {\n  $v: to-lower-case(quote($value));\n  $u: quote($unit);\n  @return str-index($v, $u) == (str-length($v) - str-length($u) + 1);\n}\n\n@function is-basic-unit($value) {\n  $units: em ex '%' px cm mm in pt pc ch rem vw vh vmin vmax;\n  @each $unit in $units {\n    @if is-unit($value, $unit) {\n      @return true;\n    }\n  }\n  @return false;\n}\n","////\n/// Core Settings : z-index\n/// @group core\n////\n\n/// Liste des z-index présent dans le DS\n/// @type map\n$z-indexes: (\n  auto: auto,\n  under: -1,\n  base: 0,\n  over: 1,\n  focus: 2000,\n  menu: 2500,\n  menu-focus: 3000,\n  nav: 3500,\n  nav-focus: 4000,\n  modal: 4500,\n  modal-focus: 5000,\n  modal-footer: 5500,\n  modal-footer-focus: 6000,\n);\n","////\n/// Inputs Schemes\n/// @group inputs\n////\n\ntextarea#{ns(input)} {\n  @include scheme-element-box-shadow-color(g600, true, 0 2px 0 0 $COLOR);\n  min-height: space(15v);\n}\n\n#{ns(input)} {\n  @include scheme-element-text-color(g800, true);\n  @include scheme-element-bg-color(g200, true);\n  @include scheme-element-box-shadow-color(g600, true, inset 0 -2px 0 0 $COLOR);\n\n  /**\n   * Style du placeholder\n   */\n  @include placeholder {\n    @include scheme-element-text-color(g600-g400, true);\n  }\n\n  /**\n   * Style pour l'input désactivé\n   */\n  @include disabled-form-field(input);\n\n  /**\n   * Modificateur pour les champs validés\n   */\n  &--valid {\n    @include scheme-element-box-shadow-color(success, false, inset 0 -2px 0 0 $COLOR);\n  }\n\n  /**\n   * Modificateur pour les champs présentant des erreurs\n   */\n  &--error {\n    @include scheme-element-box-shadow-color(error, false, inset 0 -2px 0 0 $COLOR);\n  }\n\n  /**\n   * On applique un style lorsque la valeur est automatiquement remplie par le navigateur\n   * sur les navigateurs webkit.\n   */\n  &:-webkit-autofill,\n  &:-webkit-autofill:hover,\n  &:-webkit-autofill:focus {\n    @include scheme-element-box-shadow-color(g200, true, inset 0 0 0 100px $COLOR);\n    @include _scheme-element(g800, -webkit-text-fill-color, true);\n  }\n}\n","////\n/// Schemes Module : Element\n/// @group schemes\n////\n\n/// map des transitions par élément\n/// @type map\n$scheme-elements-transitions:() !global;\n\n/// Ajout d'une combinaison de couleur sur un élément pour un propriété donnée\n/// @access private\n/// @param {String} $set-name - nom de la combinaison comme défini dans settings/sets\n/// @@param {String} $prop - propriété affectée\n/// @param {Bool | String} $transition - objet auqel la transition de couleur est associée\n/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)\n/// @param {String | list}  $value - la valeur appliquée à la propriété. la variable $COLOR est remplacée par la custom property de la combinaison de couleur\n/// @param {String}  $element - le sélécteur de l'élément\n\n@mixin _scheme-element($set-name, $prop, $transition:false, $hover:false, $value:$COLOR, $element:&) {\n  // hover\n  @if $hover != false {\n    $set: map_get($scheme-sets, $set-name);\n    $light: _scheme-set-color($set, light);\n    $dark: _scheme-set-color($set, dark);\n\n    @at-root {\n      @if $hover != override {\n        #{$element} {\n          @include _scheme-element-hover();\n        }\n      }\n\n      #{$not-dark-theme-selector} {\n        #{$element} {\n          @include _get-hover-vars($light);\n        }\n\n        $i: 0;\n        @each $type, $variation in $scheme-blocks {\n          $i: ($i + 1);\n\n          [class*=\"#{$base-scheme}-#{$type}\"],\n          [class*=\"--scheme-#{$type}-\"] {\n            #{$element} {\n              @include _get-hover-vars(_scheme-set-color($set, $type));\n            }\n          }\n        }\n      }\n\n      #{$dark-theme-selector} #{$element} {\n        @include _get-hover-vars($dark);\n      }\n    }\n  }\n\n  // le $COLOR de la valeur est remplacé par la custom property de la couleur\n  #{$prop}: _replace_color($value, var(--#{$set-name}), false);\n\n  // transitions\n  @if $transition != false and $theme-allow-transition != false {\n    @if $transition == true {\n      $transition: $element;\n    }\n\n    $transitions:map_get($scheme-elements-transitions, $transition);\n    @if $transitions == null {\n      $transitions:();\n    }\n\n    $transitions:append($transitions, $prop $theme-transition-duration, $separator: comma);\n    $scheme-elements-transitions:map_merge($scheme-elements-transitions, ($transition:$transitions)) !global;\n\n    @include _theme-transition() {\n      transition: $transitions;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String} $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)\n@mixin scheme-element-bg-color($set-name, $transition:false, $hover:false) {\n  @include _scheme-element($set-name, background-color, $transition, $hover);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n@mixin scheme-element-text-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, color, $transition);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n@mixin scheme-element-fill-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, fill, $transition);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {String} $side - le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($set-name, $transition:false, $side:null, $value:1px solid $COLOR) {\n  $prop:border;\n  @if $side != null {\n    $prop:border-#{$side};\n  }\n  @include _scheme-element($set-name, $prop, $transition, false, $value);\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($set-name, $transition:false, $value:1px solid $COLOR) {\n  @include _scheme-element($set-name, outline, $transition, false, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($set-name, $transition:false, $value:inset 0 0 0 1px $COLOR) {\n  @include _scheme-element($set-name, box-shadow, $transition, false, $value);\n}\n","////\n/// Core Tools : Global strings\n/// @group core\n////\n\n@function _pow10($exponent) {\n  @if $exponent == 0 {\n    @return 1;\n  }\n  $result: 1;\n  @for $i from 1 through $exponent {\n    $result: $result * 10;\n  }\n  @return $result;\n}\n\n/// Fonction de transformation d'une string en nombre intégral\n/// @access public\n/// @param {String} $value - le nombre en chaîne de caractères\n@function str-to-num($value) {\n  $length: str-length($value);\n  $int: ();\n  $float: ();\n  $floating: false;\n  $neg: false;\n\n  @for $i from 1 through $length {\n    $n: str-slice($value, $i, $i);\n\n    @if $n == '.' {\n      $floating: true;\n    }\n    @else if $n == '-' {\n      $neg: true;\n    }\n    @else {\n      @for $d from 0 through 9 {\n        @if quote($d) == $n {\n          @if $floating {\n            $float: append($float, $d);\n          }\n          @else {\n            $int: append($int, $d);\n          }\n        }\n      }\n    }\n  }\n\n  $result: 0;\n\n  $length: length($int);\n  @if $length > 0 {\n    @for $i from 1 through $length {\n      $result: $result + (nth($int, $i) * _pow10($length - $i));\n    }\n  }\n\n  $length: length($float);\n  @if $length > 0 {\n    @for $i from 1 through $length {\n      $result: $result + (nth($float, $i) / _pow10($i));\n    }\n  }\n\n  @if $neg {\n    @return -$result;\n  }\n  @else {\n    @return $result;\n  }\n}\n\n/// Remplacement dans une chaine de caractères\n/// @access public\n/// @param {String} $stack - chaine de caractère où chercher\n/// @param {String} $needle - élément à chercher\n/// @param {String} $content - élément de remplacement\n/// @return {String} la chaîne de caractères transformée\n@function str-replace($stack, $needle, $content) {\n  $is:quote($stack);\n  $in:quote($needle);\n  $ic:quote($content);\n\n  $i:str-index($is, $in);\n\n  @while $i != null {\n    $is:unquote(str_slice($is, 1, $i - 1) + $ic + str_slice($is, $i + str-length($in), str_length($is)));\n    $i:str-index($is, $in);\n  }\n\n  @return unquote($is);\n}\n\n/// Découpage d'une chaine de caractères avec un séparateur particulier\n/// @access public\n/// @param {String} $string - chaine de caractère à découper\n/// @param {String} $separator - séparateur\n@function str-split($string, $separator:',') {\n  $tmp: str-slice($string, 1);\n  $list: ();\n  $index: str-index($string, $separator);\n\n  @if $index == null {\n    $list: ($string);\n  }\n  @else {\n    $list: join((str-slice($string, 1, $index - 1)), str-split(str-slice($string, $index + 1), $separator));\n  }\n  @return $list;\n}\n","////\n/// Core Tools : Global disabled\n/// @group core\n////\n\n@function get-disabled-color($type) {\n  @return map_get($disabled-color-sets, $type);\n}\n\n@mixin disabled-colors($text:true, $background:false, $box-shadow-border: false) {\n  @if $text {\n    @include scheme-element-text-color(get-disabled-color(text));\n  }\n\n  @if $background {\n    @include scheme-element-bg-color(get-disabled-color(background));\n  }\n\n  @if $box-shadow-border == true {\n    @include scheme-element-box-shadow-color(get-disabled-color(border));\n  }\n  @else if $box-shadow-border == border {\n    @include scheme-element-border-color(get-disabled-color(border));\n  }\n  @else if $box-shadow-border != false {\n    @include scheme-element-box-shadow-color(get-disabled-color(border), false, $box-shadow-border);\n  }\n}\n\n@mixin disabled($text:true, $background:false, $box-shadow-border: false, $descendant:null) {\n  &[disabled],\n  &:disabled {\n    @if $descendant != null {\n      #{$descendant} {\n        @include disabled-colors($text, $background, $box-shadow-border);\n        @content;\n      }\n    }\n    @else {\n      @include disabled-colors($text, $background, $box-shadow-border);\n      @content;\n    }\n  }\n}\n","////\n/// Forms Tools\n/// @group forms\n////\n\n/// Mixin pour gérer l'état disabled avec sur un champ input avec un box-shadow\n///\n/// @access public\n///\n/// @param {String} $element [input]\n///\n/// @example scss - On ajoute un style disabled sur un élément de type input\n///   .foo {\n///     @include disabled-form-field(input);\n///   }\n@mixin disabled-form-field($element:input) {\n  @at-root #{selector_unify(&, $element)} {\n    @include disabled(true, false, inset 0 -2px 0 0 $COLOR) {\n      /**\n       * Override de l'opacité chrome sur un élément disabled\n       */\n      opacity: 1;\n      @content;\n    }\n  }\n}\n\n/// Mixin pour gérer l'état disabled sur un label et les pseudo-elements before et after, l'input étant masqué\n///\n/// @access public\n///\n/// @example scss - On ajoute un style disabled sur le label et ses pseudo-elements\n///   .foo {\n///     @include disabled-form-choice();\n///   }\n@mixin disabled-form-choice() {\n  @at-root #{selector_unify(&, input)} {\n    @include disabled(true, false, false, '+ label') {\n      &::before {\n        @include disabled-colors(false, true, border);\n      }\n      @content;\n    }\n  }\n}\n\n/// Placeholder pour les textes d'aide\n%hint-text {\n  display: block;\n  @include margin-top(0);\n  @include margin-bottom(0);\n  @include text-style(xs);\n}\n"]}