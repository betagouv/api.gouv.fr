{"version":3,"sources":["<no source>","../../../table.css","../../../../../src/table/main.scss","../../../../../src/table/styles/_module.scss","../../../../../src/core/styles/spacing/tools/_position.scss","../../../../../src/core/styles/spacing/tools/_space.scss","../../../../../src/table/styles/modules/_table-shadow.scss","../../../../../src/core/styles/typography/tools/_styles.scss","../../../../../src/core/styles/typography/settings/_font-weight.scss","../../../../../src/core/styles/spacing/tools/_size.scss","../../../../../src/core/styles/global/misc/sr-only/_tools.scss","../../../../../src/core/styles/global/tools/_pseudo.scss","../../../../../src/core/styles/global/misc/z-index/_tools.scss","../../../../../src/core/styles/global/misc/z-index/_settings.scss","../../../../../src/table/styles/_schemes.scss","../../../../../src/schemes/styles/tools/_element.scss","../../../../../src/core/styles/global/functions/_strings.scss","../../../../../src/core/styles/global/misc/breakpoints/_tools.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;;ACAhB;;yCDGyC;;AEEzC;ECCE,kBAAU;EDCV,gBAAgB;EAChB,eAAe;EE4DX,qBAhCkB;EFatB,uFAAA,CAUA;;GF/CC,CEwDD;;GFrDC,CEgED;;GF7DC,CEwED;;GFrEC,CKdH;;CLiBC;AACD;;AEpBA;EAQM,WAAW;AFgBjB;;AExBA;EAaI,iBAAiB;AFerB;;AE5BA;EI8BI,gBAAiF;EAXnF,mBAA6C;EAG3C,oBAA6D;EFmD7D,gBA1CoB;EFbpB,iBAAiB;EACjB,gBAAgB;AFkBpB;;AErCA;EAwBI,gBAAgB;EAChB,sBAAsB;EACtB,mBAAmB;EACnB,SAAS;EE8CT,gBA1CoB;EEZtB,mBAA6C;EAG3C,mBAA6D;ANiCjE;;AEvDA;EAkCI,gBK/BO;AP+DX;;AElEA;EAwCM,gBKrCK;APoEX;;AE1BG;EAIK,SAAS;AF2BjB;;AEnBG;ECxDD,kBAAU;EKEN,UAAO;EAGP,WAAQ;EJmEV,UKtEgB;ELsEhB,YKrEkB;EACpB,gBAAgB;EAChB,sBAAsB;EACtB,mBAAmB;EAAE,eAAA;EACrB,SAAS;ATiFX;;AEvBG;EEHG,gBFKwB;EELxB,gBAhCkB;EFuClB,oBAAoB;AFyB1B;;AEzFG;EAwEC,eAAe;AFqBnB;;AEtBG;EAIG,6BAA6B;AFsBnC;;AEfG;EAEG,mBAAmB;AFiBzB;;AKtGC;EFJC,kBAAU;AH8GZ;;AK1GC;EAMG,iBAAiB;EFVnB,kBAAU;AHmHZ;;AU/GU;EAGJ,cAAS;EAIT,WLGyB;EFd7B,kBAAU;EAER,MAAK;EAGL,QAAO;EAGP,SAAQ;EAGR,OAAM;EQDR,UCLO;EPYD,UAAU;EACV,oBAAoB;EACpB,oCAAoC;AL8G5C;;AK7HC;EGFK,WAAO;EHwBT,cAAc;EACd,kBAAkB;EAClB,gBAAgB;AL4GpB;;AEzIA;EWsBE,uFAAA,CAmBA;;GbsGC;AACH;;AEhJA;EYoDE,kBC8BsG;AfkExG;;AEpJA;EYoDE,yCC8BsG;ED9BtG,8BC8BsG;ED9BtG,kBC8BsG;AfyExG;;Aa3JA;ECoDE,8BC8BsG;Af6ExG;;Aa/JA;ECoDE,8BC8BsG;AfiFxG;;AEtHG;EYOD,oCC8BsG;AfsFxG;;AajJG;;EC6BD,gCC8BsG;Af0FxG;;AahIE;EAUE;;Mb2HE,CalHF;;MbqHE,Ca5GF;;Mb+GE;AACN;;AUnLU;EI+CR,4DCkCoB;AfsGtB;;AUvLU;EAGJ,cAAS;EAIT,WG8CyB;ECN7B,mFC8BsG;AfgHxG;;AU7LU;EAGJ,cAAS;EAIT,WGuDyB;ECf7B,oFC8BsG;AfsHxG;;AUnMU;EAGJ,cAAS;EAIT,WGgEyB;ECxB7B;+DC8BsG;Af4HxG;;AgBjMI;EdbJ;IImBE,iBAA6C;IAG3C,iBAA6D;ENqB/D;;EE3CF;IEyEI,aA1CoB;EJ8BtB;AAjBF","file":"table.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* ------------------------------------ *\\\n  TABLE\n\\* ------------------------------------ */\n.fr-table {\n  position: relative;\n  overflow: hidden;\n  max-width: 100%;\n  margin-bottom: 2.5rem;\n  /* Style bordered, enleve le style even/odd et ajoute des bordures entre chaque ligne */\n  /*\n  * Cache la caption\n  */\n  /*\n  * Fixe le caption en bas du tableau\n  */\n  /*\n  * pas de scroll ni de shadow\n  */\n  /*\n  * Fixe la taille des colonnes du tableau\n  */\n  /*\n* Ombres ajoutées en Js si le contenu est plus grand que le conteneur\n*/\n}\n\n.fr-table:not(.fr-table--no-scroll) table {\n  width: 100%;\n}\n\n.fr-table table {\n  border-spacing: 0;\n}\n\n.fr-table caption {\n  font-weight:  700 ;\n  font-size:  1.375rem ;\n  line-height:  1.75rem ;\n  margin: 0 0 1rem;\n  font-weight: bold;\n  text-align: left;\n}\n\n@media (min-width: 48em) {\n  .fr-table caption {\n    font-size:  1.5rem ;\n    line-height:  2rem ;\n  }\n}\n\n.fr-table td,\n.fr-table th {\n  text-align: left;\n  vertical-align: middle;\n  display: table-cell;\n  border: 0;\n  padding: 0.75rem;\n  font-size:  0.875rem ;\n  line-height:  1.5rem ;\n}\n\n@media (min-width: 48em) {\n  .fr-table td,\n  .fr-table th {\n    padding: 1rem;\n  }\n}\n\n.fr-table th {\n  font-weight: 700;\n}\n\n.fr-table thead td,\n.fr-table thead th {\n  font-weight: 700;\n}\n\n.fr-table--bordered tbody td,\n.fr-table--bordered tbody th {\n  border: 0;\n}\n\n.fr-table--no-caption caption {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  /* added line */\n  border: 0;\n}\n\n.fr-table--caption-bottom caption {\n  margin-bottom: 0;\n  margin-top: 1rem;\n  caption-side: bottom;\n}\n\n.fr-table--no-scroll {\n  min-width: auto;\n}\n\n.fr-table--no-scroll caption {\n  max-width: calc(100vw - 2rem);\n}\n\n.fr-table--layout-fixed table {\n  table-layout: fixed;\n}\n\n.fr-table--shadow caption {\n  position: absolute;\n}\n\n.fr-table--shadow .fr-table__wrapper {\n  overflow: visible;\n  position: relative;\n}\n\n.fr-table--shadow .fr-table__wrapper table::before {\n  display: block;\n  content: \"\";\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1;\n  opacity: 1;\n  pointer-events: none;\n  transition: box-shadow ease-out 0.2s;\n}\n\n.fr-table--shadow table {\n  width: 100%;\n  display: block;\n  overflow-y: hidden;\n  overflow-x: auto;\n}\n\n.fr-table {\n  /* Style bordered, enleve le style even/odd et ajoute des bordures entre chaque ligne */\n  /*\n  * Ombres ajoutées en Js si le contenu est plus grand que le conteneur\n  */\n}\n\n.fr-table caption {\n  color: var(--g800);\n}\n\n.fr-table thead td,\n.fr-table thead th {\n  border-bottom: 0.125rem solid var(--g600);\n  background-color: var(--beige);\n  color: var(--g700);\n}\n\n.fr-table tbody tr:nth-child(even) {\n  background-color: var(--beige);\n}\n\n.fr-table tbody tr:nth-child(odd) {\n  background-color: var(--white);\n}\n\n.fr-table--bordered tbody td,\n.fr-table--bordered tbody th {\n  border-bottom: 1px solid var(--g400);\n}\n\n.fr-table--bordered tbody tr:nth-child(odd), .fr-table--bordered tbody tr:nth-child(even) {\n  background-color: var(--t-plain);\n}\n\n.fr-table--shadow {\n  /**\n    * Modifier ombre à gauche\n    **/\n  /**\n    * Modifier ombre à droite\n    **/\n  /**\n    * Modifier combinaison ombre à gauche et ombre à droite\n    **/\n}\n\n.fr-table--shadow .fr-table__wrapper table::before {\n  box-shadow: inset 0 0 0 transparent, inset 0 0 0 transparent;\n}\n\n.fr-table--shadow-left .fr-table__wrapper table::before {\n  display: block;\n  content: \"\";\n  box-shadow: inset 2rem 0 1rem -1.5rem var(--scroll-shadow), inset 0 0 0 transparent;\n}\n\n.fr-table--shadow-right .fr-table__wrapper table::before {\n  display: block;\n  content: \"\";\n  box-shadow: inset 0 0 0 transparent, inset -2rem 0 1rem -1.5rem var(--scroll-shadow);\n}\n\n.fr-table--shadow-left.fr-table--shadow-right .fr-table__wrapper table::before {\n  display: block;\n  content: \"\";\n  box-shadow: inset 2rem 0 1rem -1.5rem var(--scroll-shadow), inset -2rem 0 1rem -1.5rem var(--scroll-shadow);\n}\n","/* ------------------------------------ *\\\n  TABLE\n\\* ------------------------------------ */\n\n@import './index';\n@import 'styles/module';\n@import 'styles/schemes';\n","////\n/// Table Module\n/// @group Table\n////\n\n#{ns(table)} {\n  @include relative;\n  overflow: hidden;\n  max-width: 100%;\n  @include margin-bottom(10v);\n\n  &:not(#{ns(table--no-scroll)}) {\n    table {\n      width: 100%;\n    }\n  }\n\n  table {\n    border-spacing: 0;\n  }\n\n  caption {\n    @include title-style(h4, true);\n    font-weight: bold;\n    text-align: left;\n  }\n\n  td,\n  th {\n    text-align: left;\n    vertical-align: middle;\n    display: table-cell;\n    border: 0;\n    @include padding(3v);\n    @include padding(4v, md);\n    @include text-style(sm);\n  }\n\n  th {\n    font-weight: font-weight('bold');\n  }\n\n  thead {\n    td,\n    th {\n      font-weight: font-weight('bold');\n    }\n  }\n\n  /* Style bordered, enleve le style even/odd et ajoute des bordures entre chaque ligne */\n  &--bordered {\n    tbody {\n      td,\n      th {\n        border: 0;\n      }\n    }\n  }\n\n  /*\n  * Cache la caption\n  */\n  &--no-caption {\n    caption {\n      @include sr-only();\n    }\n  }\n\n  /*\n  * Fixe le caption en bas du tableau\n  */\n  &--caption-bottom {\n    caption {\n      @include margin-bottom(0);\n      @include margin-top(4v);\n      caption-side: bottom;\n    }\n  }\n\n  /*\n  * pas de scroll ni de shadow\n  */\n  &--no-scroll {\n    min-width: auto;\n\n    caption {\n      max-width: calc(100vw - 2rem); // eol in mobile even if table overflow\n    }\n  }\n\n  /*\n  * Fixe la taille des colonnes du tableau\n  */\n  &--layout-fixed {\n    table {\n      table-layout: fixed;\n    }\n  }\n\n  @import 'modules/table-shadow';\n}\n","////\n/// Core Tools : Global position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n","////\n/// Core Tools : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  $v: quote($value);\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * 0.25rem;\n  }\n  @else if is-unit($value, w) {\n    @return $q * 0.5rem;\n  }\n  @return unquote($value);\n}\n\n/// Set space property\n///\n/// @param {String} $property [\"margin\"] - propriété à appliquer à l'espacement `[\"margin\", \"padding\"]`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `[\"x\", \"y\", \"top\", \"right\", \"bottom\", \"left\"]`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing(\"margin\", 6v, \"bottom\");\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n\n  @if $direction != null {\n    $v: space($value);\n\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    $spaces: ();\n\n    @each $v in $value {\n      $spaces: append($spaces, space($v));\n    }\n\n    #{$property}: $spaces;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Table module : Shadow\n/// @group Table\n////\n\n$shadow-wrapper: #{ns(table__wrapper)};\n\n/*\n* Ombres ajoutées en Js si le contenu est plus grand que le conteneur\n*/\n&--shadow {\n  caption {\n    @include absolute;\n  }\n\n  #{$shadow-wrapper} {\n    overflow: visible;\n    @include relative;\n\n    table {\n      @include before(block, '') {\n        @include absolute(0, 0, 0, 0);\n        @include z-index(over);\n        opacity: 1;\n        pointer-events: none;\n        transition: box-shadow ease-out 0.2s;\n      }\n    }\n  }\n\n  table {\n    @include size(100%);\n    display: block;\n    overflow-y: hidden;\n    overflow-x: auto;\n  }\n}\n","////\n/// Core Tools : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} #{px-rem($font-size)} #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin(map-get($settings, margin));\n}\n\n@mixin _space-title($settings) {\n  @include margin(map-get($settings, margin));\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-text($settings);\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-title($settings);\n  }\n}\n","////\n/// Core Settings : Typography font-weight\n/// @group core\n////\n\n$font-weight-scale: (\n  light: 300,\n  regular: 400,\n  bold: 700,\n  xx-bold: 900\n);\n","////\n/// Core Tools : Global size\n/// @group core\n////\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Core Tools : Global sr-only\n/// @group core\n////\n\n@mixin sr-only() {\n  @include absolute;\n  @include size(1px, 1px);\n  @include padding(0);\n  @include margin(-1px);\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap; /* added line */\n  border: 0;\n}\n\n@mixin sr-only-from() {\n  @each $bp, $limits in $breakpoints {\n    #{ns('sr-only-' + $bp)} {\n      @include respond-from($bp) {\n        @include sr-only();\n      }\n    }\n  }\n}\n\n@mixin sr-only-to() {\n  @each $bp, $limits in $breakpoints {\n    #{ns('sr-only-to-' + $bp)} {\n      @include respond-to($bp) {\n        @include sr-only();\n      }\n    }\n  }\n}\n","////\n/// Core Tools : Global pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $display:null, $content:null) {\n  @if $type != after and $type != before {\n    @error '$type must be before or after element';\n  }\n  $pseudo: '::' + quote($type);\n  @at-root #{selector_append(&, $pseudo)} {\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @content;\n  }\n}\n\n@mixin before($display: null, $content: null) {\n  @include _pseudo(before, $display, $content) {\n    @content;\n  }\n}\n\n@mixin after($display: null, $content: null) {\n  @include _pseudo(after, $display, $content) {\n    @content;\n  }\n}\n","////\n/// Core Tools : Global z-index\n/// @group core\n////\n\n/// Fonction de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@function z-index($index-name) {\n  @return map-get($z-indexes, $index-name);\n}\n\n/// Mixin de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@mixin z-index($index-name, $focus: false) {\n  z-index: z-index($index-name);\n  @if $focus {\n    $focus-z-index: z-index($index-name + '-focus');\n\n    @if $focus-z-index != null {\n      *:focus,\n      *:focus-visible {\n        z-index: #{$focus-z-index};\n      }\n    }\n  }\n}\n","////\n/// Core Settings : z-index\n/// @group core\n////\n\n/// Liste des z-index présent dans le DS\n/// @type map\n$z-indexes: (\n  auto: auto,\n  under: -1,\n  base: 0,\n  over: 1,\n  focus: 2000,\n  menu: 2500,\n  menu-focus: 3000,\n  nav: 3500,\n  nav-focus: 4000,\n  modal: 4500,\n  modal-focus: 5000,\n  modal-footer: 5500,\n  modal-footer-focus: 6000,\n);\n","////\n/// Table Module\n/// @group Table\n////\n\n#{ns(table)} {\n  caption {\n    @include scheme-element-text-color(g800, true);\n  }\n\n  thead {\n    td,\n    th {\n      @include scheme-element-border-color(g600, true, bottom, 0.125rem solid $COLOR);\n      @include scheme-element-bg-color(beige);\n      @include scheme-element-text-color(g700);\n    }\n  }\n\n  tbody tr:nth-child(even) {\n    @include scheme-element-bg-color(beige);\n  }\n\n  tbody tr:nth-child(odd) {\n    @include scheme-element-bg-color(white);\n  }\n\n  /* Style bordered, enleve le style even/odd et ajoute des bordures entre chaque ligne */\n  &--bordered {\n    tbody {\n      td,\n      th {\n        @include scheme-element-border-color(g400, true, bottom, 1px solid $COLOR);\n      }\n\n      tr {\n        &:nth-child(odd),\n        &:nth-child(even) {\n          @include scheme-element-bg-color(t-plain);\n        }\n      }\n    }\n  }\n\n  $shadow-wrapper: #{ns(table__wrapper)};\n\n  /*\n  * Ombres ajoutées en Js si le contenu est plus grand que le conteneur\n  */\n  &--shadow {\n\n    #{$shadow-wrapper} {\n      table {\n        @include before {\n          @include scheme-element-box-shadow-color(scroll-shadow, false, 'inset 0 0 0 transparent, inset 0 0 0 transparent');\n        }\n      }\n    }\n\n    /**\n    * Modifier ombre à gauche\n    **/\n    &-left #{$shadow-wrapper} table {\n      @include before(block, '') {\n        @include scheme-element-box-shadow-color(scroll-shadow, false, (inset space(8v) 0 space(4v) (-(space(6v))) $COLOR, inset 0 0 0 transparent));\n      }\n    }\n\n    /**\n    * Modifier ombre à droite\n    **/\n    &-right #{$shadow-wrapper} table {\n      @include before(block, '') {\n        @include scheme-element-box-shadow-color(scroll-shadow, false, (inset 0 0 0 transparent, inset (-(space(8v))) 0 space(4v) (-(space(6v))) $COLOR));\n      }\n    }\n\n    /**\n    * Modifier combinaison ombre à gauche et ombre à droite\n    **/\n    &-left#{&}-right #{$shadow-wrapper} table {\n      @include before(block, '') {\n        @include scheme-element-box-shadow-color(scroll-shadow, false, (inset space(8v) 0 space(4v) (-(space(6v))) $COLOR, inset (-(space(8v))) 0 space(4v) (-(space(6v))) $COLOR));\n      }\n    }\n  }\n}\n","////\n/// Schemes Module : Element\n/// @group schemes\n////\n\n/// map des transitions par élément\n/// @type map\n$scheme-elements-transitions:() !global;\n\n/// Ajout d'une combinaison de couleur sur un élément pour un propriété donnée\n/// @access private\n/// @param {String} $set-name - nom de la combinaison comme défini dans settings/sets\n/// @@param {String} $prop - propriété affectée\n/// @param {Bool | String} $transition - objet auqel la transition de couleur est associée\n/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)\n/// @param {String | list}  $value - la valeur appliquée à la propriété. la variable $COLOR est remplacée par la custom property de la combinaison de couleur\n/// @param {String}  $element - le sélécteur de l'élément\n\n@mixin _scheme-element($set-name, $prop, $transition:false, $hover:false, $value:$COLOR, $element:&) {\n  // hover\n  @if $hover != false {\n    $set: map_get($scheme-sets, $set-name);\n    $light: _scheme-set-color($set, light);\n    $dark: _scheme-set-color($set, dark);\n\n    @at-root {\n      @if $hover != override {\n        #{$element} {\n          @include _scheme-element-hover();\n        }\n      }\n\n      #{$not-dark-theme-selector} {\n        #{$element} {\n          @include _get-hover-vars($light);\n        }\n\n        $i: 0;\n        @each $type, $variation in $scheme-blocks {\n          $i: ($i + 1);\n\n          [class*=\"#{$base-scheme}-#{$type}\"],\n          [class*=\"--scheme-#{$type}-\"] {\n            #{$element} {\n              @include _get-hover-vars(_scheme-set-color($set, $type));\n            }\n          }\n        }\n      }\n\n      #{$dark-theme-selector} #{$element} {\n        @include _get-hover-vars($dark);\n      }\n    }\n  }\n\n  // le $COLOR de la valeur est remplacé par la custom property de la couleur\n  #{$prop}: _replace_color($value, var(--#{$set-name}), false);\n\n  // transitions\n  @if $transition != false and $theme-allow-transition != false {\n    @if $transition == true {\n      $transition: $element;\n    }\n\n    $transitions:map_get($scheme-elements-transitions, $transition);\n    @if $transitions == null {\n      $transitions:();\n    }\n\n    $transitions:append($transitions, $prop $theme-transition-duration, $separator: comma);\n    $scheme-elements-transitions:map_merge($scheme-elements-transitions, ($transition:$transitions)) !global;\n\n    @include _theme-transition() {\n      transition: $transitions;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String} $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)\n@mixin scheme-element-bg-color($set-name, $transition:false, $hover:false) {\n  @include _scheme-element($set-name, background-color, $transition, $hover);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n@mixin scheme-element-text-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, color, $transition);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n@mixin scheme-element-fill-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, fill, $transition);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {String} $side - le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($set-name, $transition:false, $side:null, $value:1px solid $COLOR) {\n  $prop:border;\n  @if $side != null {\n    $prop:border-#{$side};\n  }\n  @include _scheme-element($set-name, $prop, $transition, false, $value);\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($set-name, $transition:false, $value:1px solid $COLOR) {\n  @include _scheme-element($set-name, outline, $transition, false, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($set-name, $transition:false, $value:inset 0 0 0 1px $COLOR) {\n  @include _scheme-element($set-name, box-shadow, $transition, false, $value);\n}\n","////\n/// Core Tools : Global strings\n/// @group core\n////\n\n@function _pow10($exponent) {\n  @if $exponent == 0 {\n    @return 1;\n  }\n  $result: 1;\n  @for $i from 1 through $exponent {\n    $result: $result * 10;\n  }\n  @return $result;\n}\n\n/// Fonction de transformation d'une string en nombre intégral\n/// @access public\n/// @param {String} $value - le nombre en chaîne de caractères\n@function str-to-num($value) {\n  $length: str-length($value);\n  $int: ();\n  $float: ();\n  $floating: false;\n  $neg: false;\n\n  @for $i from 1 through $length {\n    $n: str-slice($value, $i, $i);\n\n    @if $n == '.' {\n      $floating: true;\n    }\n    @else if $n == '-' {\n      $neg: true;\n    }\n    @else {\n      @for $d from 0 through 9 {\n        @if quote($d) == $n {\n          @if $floating {\n            $float: append($float, $d);\n          }\n          @else {\n            $int: append($int, $d);\n          }\n        }\n      }\n    }\n  }\n\n  $result: 0;\n\n  $length: length($int);\n  @if $length > 0 {\n    @for $i from 1 through $length {\n      $result: $result + (nth($int, $i) * _pow10($length - $i));\n    }\n  }\n\n  $length: length($float);\n  @if $length > 0 {\n    @for $i from 1 through $length {\n      $result: $result + (nth($float, $i) / _pow10($i));\n    }\n  }\n\n  @if $neg {\n    @return -$result;\n  }\n  @else {\n    @return $result;\n  }\n}\n\n/// Remplacement dans une chaine de caractères\n/// @access public\n/// @param {String} $stack - chaine de caractère où chercher\n/// @param {String} $needle - élément à chercher\n/// @param {String} $content - élément de remplacement\n/// @return {String} la chaîne de caractères transformée\n@function str-replace($stack, $needle, $content) {\n  $is:quote($stack);\n  $in:quote($needle);\n  $ic:quote($content);\n\n  $i:str-index($is, $in);\n\n  @while $i != null {\n    $is:unquote(str_slice($is, 1, $i - 1) + $ic + str_slice($is, $i + str-length($in), str_length($is)));\n    $i:str-index($is, $in);\n  }\n\n  @return unquote($is);\n}\n\n/// Découpage d'une chaine de caractères avec un séparateur particulier\n/// @access public\n/// @param {String} $string - chaine de caractère à découper\n/// @param {String} $separator - séparateur\n@function str-split($string, $separator:',') {\n  $tmp: str-slice($string, 1);\n  $list: ();\n  $index: str-index($string, $separator);\n\n  @if $index == null {\n    $list: ($string);\n  }\n  @else {\n    $list: join((str-slice($string, 1, $index - 1)), str-split(str-slice($string, $index + 1), $separator));\n  }\n  @return $list;\n}\n","////\n/// Core Tools : Global breakpoints\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n"]}