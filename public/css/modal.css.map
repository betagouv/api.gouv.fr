{"version":3,"sources":["<no source>","../../../../../src/modal/main.scss","../../../modal.css","../../../../../src/modal/styles/_module.scss","../../../../../src/core/styles/spacing/tools/_space.scss","../../../../../src/core/styles/global/tools/_display.scss","../../../../../src/core/styles/spacing/tools/_position.scss","../../../../../src/core/styles/spacing/tools/_size.scss","../../../../../src/core/styles/global/misc/z-index/_settings.scss","../../../../../src/core/styles/global/tools/_pseudo.scss","../../../../../src/core/styles/global/tools/_blocks.scss","../../../../../src/core/styles/global/misc/shadow/_tools.scss","../../../../../src/core/styles/global/misc/shadow/_settings.scss","../../../../../src/core/styles/typography/tools/_styles.scss","../../../../../src/core/styles/typography/tools/_font-weight.scss","../../../../../src/core/styles/typography/settings/_font-weight.scss","../../../../../src/schemes/styles/tools/_element.scss","../../../../../src/core/styles/global/functions/_strings.scss","../../../../../src/core/styles/global/misc/breakpoints/_tools.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA;;yCCEyC;;ACGzC;EAEE,YAAY;EACZ,cAAc;EACd,kBAAkB;EAClB,UAAU;ECoER,UDnEgB;ECmEhB,SDlEe;EEDf,aAAa;EAIb,sBAAgB;EAIhB,oBAAa;EAIb,8BAAiB;ECjBnB,eAAU;EAER,MAAK;EAGL,QAAO;EAGP,SAAQ;EAGR,OAAM;ECTJ,WAAO;EAGP,YAAQ;EJIZ,aKEW;ELAX,yCAAyC;EAgBzC;;GDRC;AACH;;ACrBA;EAeI,aAAa;ADUjB;;AOpBU;EAGJ,cAAS;EAIT,WNMqB;EIfrB,QAAO;EAGP,YAAQ;EJcV,cCWoB;AFExB;;AO5BU;EAGJ,cAAS;EFLT,QAAO;EAGP,YAAQ;EJmBV,cCMoB;AFSxB;;AOnCU;EN4BJ,aAAa;ADWnB;;AOvCU;ENmCJ,WAAW;ADcjB;;ACEE;EAEE,mBAAmB;EACnB,UAAU;EIxDR,WAAO;EAGP,YAAQ;EJuDV,yCAAyC;ADe7C;;AQrEE;EP0DE,gBAAgB;EAChB,cAAc;EACd,8BAA8B;EQlEhC,gFCCyE;AViF3E;;ACRE;EACE,cAAc;EEtEd,aAAa;EAQb,mBAAa;ED2Db,yBA1CoB;AFiExB;;ACfE;EC1BI,kBAxBkB;EAyBlB,mBAzBkB;EAgClB,qBAhCkB;AFuExB;;ACdE;EACE,cAAc;EEnFd,aAAa;EDmEb,aA1CoB;EAgClB,mBAhCkB;EE9BtB,gBAAU;EAQR,SAAQ;EHuFR,2BAA2B;EAC3B,aKlFsB;AN+G1B;;ACtCG;EAYG,oBAAoB;EACpB,wBAAgC;AD0CtC;;ACtCE;EU3EE,gBAAiF;EAXnF,mBAA6C;EAG3C,oBAA6D;ECR/D,gBCXS;EX4DL,aDkDmB;EClDnB,qBAhCkB;AFyHxB;;AC/CG;EC1CG,oBAhCkB;AFoIxB;;ACnKA;EaoDE,gCC8BsG;Af2FxG;;AQtKE;EM6CA,0BC8BsG;Af+FxG;;AQ1KG;ECND,kFCE2E;EIiD3E,+BC8BsG;AfoGxG;;AC9FE;EapCA,0BC8BsG;AfwGxG;;AgB7KI;ETRM;IN8BF,WAAW;EDcjB;;EO5CQ;IFFJ,QAAO;IAGP,YAAQ;IJyCR,cAAc;EDclB;;EOxDQ;IAOJ,WNsCqB;II/CrB,QAAO;IAGP,YAAQ;IJ8CR,cAAc;EDelB;;EQ5DA;IPgEI,gBAAgB;EDiBpB;;ECPA;IC1BI,kBAxBkB;IAyBlB,mBAzBkB;EF6EtB;;EC3BA;IClBI,mBAhCkB;EFmFtB;;EC1BA;ICfE,aA1CoB;EFoGtB;;EC3CA;ICzBI,iBAhCkB;EF0GtB;;EChCA;IUtFA,iBAA6C;IAG3C,iBAA6D;EXwI/D;;ECrDA;IC1CI,mBAhCkB;EFyItB;AAtHF","file":"modal.css","sourcesContent":[null,"/* ------------------------------------ *\\\n  LOGO\n\\* ------------------------------------ */\n\n@import './index';\n@import 'styles/module';\n@import 'styles/schemes';\n","/* ------------------------------------ *\\\n  LOGO\n\\* ------------------------------------ */\n.fr-modal {\n  border: none;\n  color: inherit;\n  visibility: hidden;\n  opacity: 0;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  justify-content: space-between;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 4500;\n  transition: opacity 0.3s, visibility 0.3s;\n  /**\n  * Modifier pour fixer la modale en haut en mobile (par defaut en bas)\n  */\n}\n\n.fr-modal:focus {\n  outline: none;\n}\n\n.fr-modal::before {\n  display: block;\n  content: \"\";\n  width: 0;\n  height: 2rem;\n  flex: 1 0 2rem;\n}\n\n.fr-modal::after {\n  display: block;\n  width: 0;\n  height: 2rem;\n  flex: 1 0 2rem;\n}\n\n.fr-modal--top::before {\n  content: none;\n}\n\n@media (min-width: 48em) {\n  .fr-modal--top::before {\n    content: '';\n  }\n}\n\n.fr-modal--top::after {\n  content: '';\n}\n\n@media (min-width: 48em) {\n  .fr-modal::before {\n    width: 0;\n    height: 10vh;\n    flex: 1 0 10vh;\n  }\n  .fr-modal::after {\n    content: \"\";\n    width: 0;\n    height: 10vh;\n    flex: 1 0 10vh;\n  }\n}\n\n.fr-modal--opened {\n  visibility: inherit;\n  opacity: 1;\n  width: 100%;\n  height: 100%;\n  transition: opacity 0.3s, visibility 0.3s;\n}\n\n.fr-modal__body {\n  overflow-y: auto;\n  flex: 1 1 auto;\n  max-height: calc(100vh - 2rem);\n  box-shadow: 0 8px 8px 0 rgba(0, 0, 0, 0.1), 0 8px 16px -16px rgba(0, 0, 0, 0.32);\n}\n\n@media (min-width: 48em) {\n  .fr-modal__body {\n    max-height: 80vh;\n  }\n}\n\n.fr-modal__header {\n  flex: auto 0 0;\n  display: flex;\n  align-items: center;\n  padding: 1rem 1rem 0.5rem;\n}\n\n.fr-modal__content {\n  padding-left: 1rem;\n  padding-right: 1rem;\n  margin-bottom: 3.5rem;\n}\n\n@media (min-width: 48em) {\n  .fr-modal__content {\n    padding-left: 2rem;\n    padding-right: 2rem;\n  }\n}\n\n@media (min-width: 48em) {\n  .fr-modal__content {\n    margin-bottom: 4rem;\n  }\n}\n\n.fr-modal__footer {\n  flex: auto 0 0;\n  display: flex;\n  padding: 1rem;\n  margin-top: -2.5rem;\n  position: sticky;\n  bottom: 0;\n  transition: box-shadow 0.3s;\n  z-index: 6000;\n}\n\n@media (min-width: 48em) {\n  .fr-modal__footer {\n    padding: 2rem;\n  }\n}\n\n@media (min-width: 48em) {\n  .fr-modal__footer {\n    margin-top: -3rem;\n  }\n}\n\n.fr-modal__footer .fr-btns-group {\n  margin-bottom: -1rem;\n  width: calc(100% + 1rem);\n}\n\n.fr-modal__title {\n  font-weight:  700 ;\n  font-size:  1.375rem ;\n  line-height:  1.75rem ;\n  font-weight: 700;\n  margin-top: 0;\n  margin-bottom: 0.5rem;\n}\n\n@media (min-width: 48em) {\n  .fr-modal__title {\n    font-size:  1.5rem ;\n    line-height:  2rem ;\n  }\n}\n\n.fr-modal__title [class*=\"fr-fi-\"] {\n  margin-right: 0.5rem;\n}\n\n@media (min-width: 48em) {\n  .fr-modal__title {\n    margin-bottom: 1rem;\n  }\n}\n\n.fr-modal {\n  background-color: var(--overlay);\n}\n\n.fr-modal__body {\n  background-color: var(--w);\n}\n\n.fr-modal__body.fr-scroll-shadow .fr-modal__footer {\n  box-shadow: 0 -8px 8px 0 rgba(0, 0, 0, 0.1), 0 -8px 16px -16px rgba(0, 0, 0, 0.32);\n  background-color: var(--w-g750);\n}\n\n.fr-modal__footer {\n  background-color: var(--w);\n}\n","////\n/// Modal Module\n/// @group modal\n////\n\n#{ns(modal)} {\n  // reset dialog\n  border: none;\n  color: inherit;\n  visibility: hidden;\n  opacity: 0;\n  @include padding(0);\n  @include margin(0);\n  @include display-flex(column, stretch, space-between);\n  @include fixed(0, 0, 0, 0, 100%, 100%);\n  z-index: z-index(modal);\n  // transition in/out\n  transition: opacity 0.3s, visibility 0.3s;\n\n  &:focus {\n    outline: none;\n  }\n\n  @include before(block, '') {\n    @include size(0, 8v);\n    flex: 1 0 space(8v);\n  }\n\n  @include after(block) {\n    @include size(0, 8v);\n    flex: 1 0 space(8v);\n  }\n\n  /**\n  * Modifier pour fixer la modale en haut en mobile (par defaut en bas)\n  */\n  &--top {\n    @include before {\n      content: none;\n      @include respond-from(md) {\n        content: '';\n      }\n    }\n\n    @include after {\n      content: '';\n    }\n  }\n\n  @include respond-from(md) {\n    @include before {\n      @include size(0, 10vh);\n      flex: 1 0 10vh;\n    }\n\n    @include after(null, '') {\n      @include size(0, 10vh);\n      flex: 1 0 10vh;\n    }\n  }\n\n  &--opened {\n    // transition in/out\n    visibility: inherit;\n    opacity: 1;\n    @include size(100%, 100%);\n    transition: opacity 0.3s, visibility 0.3s;\n  }\n\n  @include body {\n    overflow-y: auto;\n    flex: 1 1 auto;\n    max-height: calc(100vh - 2rem);\n    @include shadow(md);\n\n    @include respond-from(md) {\n      max-height: 80vh;\n    }\n  }\n\n  &__header {\n    flex: auto 0 0;\n    @include display-flex(null, center);\n    @include padding(4v 4v 2v);\n  }\n\n  &__content {\n    @include padding-x(4v);\n    @include padding-x(8v, md);\n    @include margin-bottom(14v);\n    @include margin-bottom(16v, md);\n  }\n\n  &__footer {\n    flex: auto 0 0;\n    @include display-flex(null);\n    @include padding(4v);\n    @include padding(8v, md);\n    @include margin-top(-10v);\n    @include margin-top(-12v, md);\n    @include sticky(null,null,0);\n    transition: box-shadow 0.3s;\n    z-index: z-index(modal-footer-focus);\n\n    #{ns-group(btns)} {\n      margin-bottom: -1rem;\n      width: calc(100% + #{space(4v)});\n    }\n  }\n\n  &__title {\n    @include title-style('h4');\n    @include font-weight('bold');\n\n    [class*=\"#{$prefix}-fi-\"] {\n      @include margin-right(2v);\n    }\n\n    @include margin-top(0);\n    @include margin-bottom(2v);\n    @include margin-bottom(4v, md);\n  }\n}\n","////\n/// Core Tools : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  $v: quote($value);\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * 0.25rem;\n  }\n  @else if is-unit($value, w) {\n    @return $q * 0.5rem;\n  }\n  @return unquote($value);\n}\n\n/// Set space property\n///\n/// @param {String} $property [\"margin\"] - propriété à appliquer à l'espacement `[\"margin\", \"padding\"]`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `[\"x\", \"y\", \"top\", \"right\", \"bottom\", \"left\"]`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing(\"margin\", 6v, \"bottom\");\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n\n  @if $direction != null {\n    $v: space($value);\n\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    $spaces: ();\n\n    @each $v in $value {\n      $spaces: append($spaces, space($v));\n    }\n\n    #{$property}: $spaces;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Tools : Global display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n\n%inline-flex-center {\n  @include display-flex(row, center, null, null, true);\n}\n","////\n/// Core Tools : Global position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n","////\n/// Core Tools : Global size\n/// @group core\n////\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Core Settings : z-index\n/// @group core\n////\n\n/// Liste des z-index présent dans le DS\n/// @type map\n$z-indexes: (\n  auto: auto,\n  under: -1,\n  base: 0,\n  over: 1,\n  focus: 2000,\n  menu: 2500,\n  menu-focus: 3000,\n  nav: 3500,\n  nav-focus: 4000,\n  modal: 4500,\n  modal-focus: 5000,\n  modal-footer: 5500,\n  modal-footer-focus: 6000,\n);\n","////\n/// Core Tools : Global pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $display:null, $content:null) {\n  @if $type != after and $type != before {\n    @error '$type must be before or after element';\n  }\n  $pseudo: '::' + quote($type);\n  @at-root #{selector_append(&, $pseudo)} {\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @content;\n  }\n}\n\n@mixin before($display: null, $content: null) {\n  @include _pseudo(before, $display, $content) {\n    @content;\n  }\n}\n\n@mixin after($display: null, $content: null) {\n  @include _pseudo(after, $display, $content) {\n    @content;\n  }\n}\n","////\n/// Core Tools : Global list\n/// @group core\n////\n\n@mixin title() {\n  &__title {\n    @content;\n  }\n}\n\n@mixin body() {\n  &__body {\n    @content;\n  }\n}\n\n@mixin list() {\n  &__list {\n    @content;\n  }\n}\n\n@mixin list-item() {\n  &__item {\n    @content;\n  }\n}\n","////\n/// Core Tools : Global shadow\n/// @group core\n////\n\n@mixin shadow($type) {\n  box-shadow: map_get($shadows-settings, $type);\n}\n","////\n/// Core Settings : Global shadow\n/// @group core\n////\n\n$shadows-settings: (\n  sm: (0 1px 4px 0 rgba(0, 0, 0, 0.23), 0 2px 0 -2px rgba(0, 0, 0, 0.16), 0 1px 1px 0 rgba(0, 0, 0, 0.16)),\n  md: (0 8px 8px 0 rgba(0, 0, 0, 0.1), 0 8px 16px -16px rgba(0, 0, 0, 0.32)),\n  up: (0 -8px 8px 0 rgba(0, 0, 0, 0.1), 0 -8px 16px -16px rgba(0, 0, 0, 0.32))\n);\n","////\n/// Core Tools : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} #{px-rem($font-size)} #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin(map-get($settings, margin));\n}\n\n@mixin _space-title($settings) {\n  @include margin(map-get($settings, margin));\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-text($settings);\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-title($settings);\n  }\n}\n","////\n/// Core Tools : Typography font-weight\n/// @group core\n////\n\n/// Return font-weight value from font-weight map.\n///\n/// @param {String} $scale [\"regular\"] - Type scale value from `$weight-scale` (Default to \"regular\" = 400)\n///\n/// @example scss - Set font-weight to bold (700)\n///   .foo {\n///     font-weight: font-weight(\"bold\");\n///   }\n\n@function font-weight($scale: regular) {\n  @return map-get($font-weight-scale, $scale);\n}\n\n@mixin font-weight($scale) {\n  font-weight: font-weight($scale);\n}\n\n@mixin font-weights() {\n  @each $name, $weight in $font-weight-scale {\n    & #{ns('text--' + $name)} {\n      font-weight: #{$weight} !important;\n    }\n  }\n}\n","////\n/// Core Settings : Typography font-weight\n/// @group core\n////\n\n$font-weight-scale: (\n  light: 300,\n  regular: 400,\n  bold: 700,\n  xx-bold: 900\n);\n","////\n/// Schemes Module : Element\n/// @group schemes\n////\n\n/// map des transitions par élément\n/// @type map\n$scheme-elements-transitions:() !global;\n\n/// Ajout d'une combinaison de couleur sur un élément pour un propriété donnée\n/// @access private\n/// @param {String} $set-name - nom de la combinaison comme défini dans settings/sets\n/// @@param {String} $prop - propriété affectée\n/// @param {Bool | String} $transition - objet auqel la transition de couleur est associée\n/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)\n/// @param {String | list}  $value - la valeur appliquée à la propriété. la variable $COLOR est remplacée par la custom property de la combinaison de couleur\n/// @param {String}  $element - le sélécteur de l'élément\n\n@mixin _scheme-element($set-name, $prop, $transition:false, $hover:false, $value:$COLOR, $element:&) {\n  // hover\n  @if $hover != false {\n    $set: map_get($scheme-sets, $set-name);\n    $light: _scheme-set-color($set, light);\n    $dark: _scheme-set-color($set, dark);\n\n    @at-root {\n      @if $hover != override {\n        #{$element} {\n          @include _scheme-element-hover();\n        }\n      }\n\n      #{$not-dark-theme-selector} {\n        #{$element} {\n          @include _get-hover-vars($light);\n        }\n\n        $i: 0;\n        @each $type, $variation in $scheme-blocks {\n          $i: ($i + 1);\n\n          [class*=\"#{$base-scheme}-#{$type}\"],\n          [class*=\"--scheme-#{$type}-\"] {\n            #{$element} {\n              @include _get-hover-vars(_scheme-set-color($set, $type));\n            }\n          }\n        }\n      }\n\n      #{$dark-theme-selector} #{$element} {\n        @include _get-hover-vars($dark);\n      }\n    }\n  }\n\n  // le $COLOR de la valeur est remplacé par la custom property de la couleur\n  #{$prop}: _replace_color($value, var(--#{$set-name}), false);\n\n  // transitions\n  @if $transition != false and $theme-allow-transition != false {\n    @if $transition == true {\n      $transition: $element;\n    }\n\n    $transitions:map_get($scheme-elements-transitions, $transition);\n    @if $transitions == null {\n      $transitions:();\n    }\n\n    $transitions:append($transitions, $prop $theme-transition-duration, $separator: comma);\n    $scheme-elements-transitions:map_merge($scheme-elements-transitions, ($transition:$transitions)) !global;\n\n    @include _theme-transition() {\n      transition: $transitions;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String} $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)\n@mixin scheme-element-bg-color($set-name, $transition:false, $hover:false) {\n  @include _scheme-element($set-name, background-color, $transition, $hover);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n@mixin scheme-element-text-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, color, $transition);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n@mixin scheme-element-fill-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, fill, $transition);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {String} $side - le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($set-name, $transition:false, $side:null, $value:1px solid $COLOR) {\n  $prop:border;\n  @if $side != null {\n    $prop:border-#{$side};\n  }\n  @include _scheme-element($set-name, $prop, $transition, false, $value);\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($set-name, $transition:false, $value:1px solid $COLOR) {\n  @include _scheme-element($set-name, outline, $transition, false, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($set-name, $transition:false, $value:inset 0 0 0 1px $COLOR) {\n  @include _scheme-element($set-name, box-shadow, $transition, false, $value);\n}\n","////\n/// Core Tools : Global strings\n/// @group core\n////\n\n@function _pow10($exponent) {\n  @if $exponent == 0 {\n    @return 1;\n  }\n  $result: 1;\n  @for $i from 1 through $exponent {\n    $result: $result * 10;\n  }\n  @return $result;\n}\n\n/// Fonction de transformation d'une string en nombre intégral\n/// @access public\n/// @param {String} $value - le nombre en chaîne de caractères\n@function str-to-num($value) {\n  $length: str-length($value);\n  $int: ();\n  $float: ();\n  $floating: false;\n  $neg: false;\n\n  @for $i from 1 through $length {\n    $n: str-slice($value, $i, $i);\n\n    @if $n == '.' {\n      $floating: true;\n    }\n    @else if $n == '-' {\n      $neg: true;\n    }\n    @else {\n      @for $d from 0 through 9 {\n        @if quote($d) == $n {\n          @if $floating {\n            $float: append($float, $d);\n          }\n          @else {\n            $int: append($int, $d);\n          }\n        }\n      }\n    }\n  }\n\n  $result: 0;\n\n  $length: length($int);\n  @if $length > 0 {\n    @for $i from 1 through $length {\n      $result: $result + (nth($int, $i) * _pow10($length - $i));\n    }\n  }\n\n  $length: length($float);\n  @if $length > 0 {\n    @for $i from 1 through $length {\n      $result: $result + (nth($float, $i) / _pow10($i));\n    }\n  }\n\n  @if $neg {\n    @return -$result;\n  }\n  @else {\n    @return $result;\n  }\n}\n\n/// Remplacement dans une chaine de caractères\n/// @access public\n/// @param {String} $stack - chaine de caractère où chercher\n/// @param {String} $needle - élément à chercher\n/// @param {String} $content - élément de remplacement\n/// @return {String} la chaîne de caractères transformée\n@function str-replace($stack, $needle, $content) {\n  $is:quote($stack);\n  $in:quote($needle);\n  $ic:quote($content);\n\n  $i:str-index($is, $in);\n\n  @while $i != null {\n    $is:unquote(str_slice($is, 1, $i - 1) + $ic + str_slice($is, $i + str-length($in), str_length($is)));\n    $i:str-index($is, $in);\n  }\n\n  @return unquote($is);\n}\n\n/// Découpage d'une chaine de caractères avec un séparateur particulier\n/// @access public\n/// @param {String} $string - chaine de caractère à découper\n/// @param {String} $separator - séparateur\n@function str-split($string, $separator:',') {\n  $tmp: str-slice($string, 1);\n  $list: ();\n  $index: str-index($string, $separator);\n\n  @if $index == null {\n    $list: ($string);\n  }\n  @else {\n    $list: join((str-slice($string, 1, $index - 1)), str-split(str-slice($string, $index + 1), $separator));\n  }\n  @return $list;\n}\n","////\n/// Core Tools : Global breakpoints\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n"]}