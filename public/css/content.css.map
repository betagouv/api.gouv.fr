{"version":3,"sources":["<no source>","../../../content.css","../../../../../src/content/main.scss","../../../../../src/core/styles/global/tools/_fit.scss","../../../../../src/core/styles/medias/_tools.scss","../../../../../src/core/styles/spacing/tools/_position.scss","../../../../../src/core/styles/spacing/tools/_size.scss","../../../../../src/content/styles/_module.scss","../../../../../src/core/styles/spacing/tools/_space.scss","../../../../../src/core/styles/global/tools/_display.scss","../../../../../src/core/styles/global/tools/_pseudo.scss","../../../../../src/core/styles/medias/_settings.scss","../../../../../src/core/styles/typography/tools/_styles.scss","../../../../../src/links/styles/tools/_nest.scss","../../../../../src/links/styles/tools/_sizes.scss","../../../../../src/core/styles/global/functions/_units.scss","../../../../../src/links/styles/tools/_icons.scss","../../../../../src/core/styles/icons/_tools.scss","../../../../../src/content/styles/_tools.scss","../../../../../src/core/styles/global/misc/breakpoints/_tools.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;;ACAhB;;yCDGyC;;AEEzC;EACE,iBAAiB;EACjB,wBAAwB;AFA1B;;AGaA;ECdE,kBAAU;EAER,MAAK;EAGL,QAAO;EAGP,SAAQ;EAGR,OAAM;ECTJ,WAAO;EAGP,YAAQ;ALMd;;AMZA;EDGM,WAAO;EEsET,gBDvEmB;EEInB,aAAa;EAIb,sBAAgB;EAIhB,mBAAa;ARMjB;;AMfE;EDFI,WAAO;EDFX,kBAAU;AJwBZ;;ASpBU;EAGJ,cAAS;EAIT,WNRqB;EEDrB,WAAO;EFQT,sBORiB;AV6BrB;;AMfE;EDdI,WAAO;EE4DP,kBAhCkB;EDVpB,iBAAiB;ANiBrB;;AMdE;EKLA,kBAA6C;EAG3C,oBAA6D;AXqBjE;;AYkBE;ECzDA,mBCkBgD;EDjBhD,mBN0BsB;EMvBtB,gBNuBsB;EMTtB,wBAAsD;EAGpD,mBAAe;EDgBb,eAAe;EACf,gBAAgB;EGjClB,2BAA2B;EFqC3B,qBNfoB;EMgBpB,qBAAyC;AbS7C;;ASnDU;EOyDF,6BAA6B;EAC7B,kBAAkB;EAClB,8BAA8B;EAC9B,oBAAoB;EACpB,oBAAoB;EACpB,cAAc;AhBFtB;;AS5DU;EO6CN,YAAqB;AhBmBzB;;AShEU;EMsBJ,sBFGwB;EEFxB,mBRGkB;EQFlB,eDP4C;AdqDlD;;AiBnEK;;;;EAGG,gBAAO;AjBqEf;;AiBxEK;;;;EAGG,iBAAO;AjBiFf;;AiBpFK;;EAYK,gBAAgB;AjBmF1B;;AiB/FK;;EAgBK,6BAAqC;AjBmF/C;;AkB9FI;EDLC;;;;IAMK,UAAO;EjBwEf;;EiB9EG;;;;IAMK,WAAO;EjBoFf;AAXF","file":"content.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* ------------------------------------ *\\\n  CONTENT\n\\* ------------------------------------ */\n.fr-content-media__img img {\n  object-fit: cover;\n  object-position: 50% 50%;\n}\n\n.fr-content-media__img img {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.fr-content-media {\n  width: 100%;\n  margin: 2.5rem 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.fr-content-media__img {\n  width: 100%;\n  position: relative;\n}\n\n.fr-content-media__img::before {\n  display: block;\n  content: \"\";\n  width: 100%;\n  padding-bottom: 56.25%;\n}\n\n.fr-content-media__caption, .fr-content-media__transcription {\n  width: 100%;\n  margin-top: 0.5rem;\n  text-align: right;\n}\n\n.fr-content-media__caption {\n  font-size:  0.75rem ;\n  line-height:  1.25rem ;\n}\n\n.fr-content-media__transcription .fr-link {\n  font-size: 0.875rem;\n  line-height: 1.5rem;\n  min-height: 2rem;\n  padding: 0.25rem 0.75rem;\n  border-radius: 1rem;\n  max-width: none;\n  max-height: none;\n  flex-direction: row-reverse;\n  margin-left: -0.75rem;\n  margin-right: -0.5rem;\n}\n\n.fr-content-media__transcription .fr-link::before {\n  font-family: icons !important;\n  font-style: normal;\n  font-weight: normal !important;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n}\n\n.fr-content-media__transcription .fr-link::before {\n  content:  \"\";\n}\n\n.fr-content-media__transcription .fr-link::before {\n  margin-right: -0.25rem;\n  margin-left: 0.5rem;\n  font-size: 1rem;\n}\n\n.fr-content-media--sm .fr-content-media__img, .fr-content-media--sm .fr-responsive-vid,\n.fr-content-media--sm .fr-content-media__caption, .fr-content-media--sm .fr-content-media__transcription {\n  width: 83.33333%;\n}\n\n@media (min-width: 48em) {\n  .fr-content-media--sm .fr-content-media__img, .fr-content-media--sm .fr-responsive-vid,\n  .fr-content-media--sm .fr-content-media__caption, .fr-content-media--sm .fr-content-media__transcription {\n    width: 75%;\n  }\n}\n\n.fr-content-media--lg .fr-content-media__img, .fr-content-media--lg .fr-responsive-vid,\n.fr-content-media--lg .fr-content-media__caption, .fr-content-media--lg .fr-content-media__transcription {\n  width: 116.66667%;\n}\n\n@media (min-width: 48em) {\n  .fr-content-media--lg .fr-content-media__img, .fr-content-media--lg .fr-responsive-vid,\n  .fr-content-media--lg .fr-content-media__caption, .fr-content-media--lg .fr-content-media__transcription {\n    width: 125%;\n  }\n}\n\n.fr-content-media--lg .fr-content-media__img, .fr-content-media--lg .fr-responsive-vid {\n  max-width: 100vw;\n}\n\n.fr-content-media--lg .fr-content-media__caption, .fr-content-media--lg .fr-content-media__transcription {\n  max-width: calc(100vw - 2rem);\n}\n","/* ------------------------------------ *\\\n  CONTENT\n\\* ------------------------------------ */\n\n@import './index';\n@import 'styles/module';\n","////\n/// Core Tools : Global fit\n/// @group core\n////\n\n%fit-cover-center {\n  object-fit: cover;\n  object-position: 50% 50%;\n}\n","////\n/// Core TTools : Medias\n/// @group core\n////\n\n/// Force un ratio d'aspect sur le block par l'ajout d'un pseudo-element en before\n/// @param {String} $ratio - key du ratio attendu selon la map $ratio-scale\n/// @param {Size | Bool} $block - détermine si le block est créé et sa taille correspondante\n@mixin aspect-ratio($ratio: 16x9, $block: 100%) {\n  @include before(block, '') {\n    @if $block != false {\n      @if $block == true {\n        $block: 100%;\n      }\n      @include size($block);\n    }\n    padding-bottom: map_get($ratio-scale, $ratio);\n  }\n}\n\n%media-overlay-cover {\n  @extend %fit-cover-center;\n  @include absolute(0, 0, 0, 0, 100%, 100%);\n}\n","////\n/// Core Tools : Global position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n","////\n/// Core Tools : Global size\n/// @group core\n////\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Content Module\n/// @group content\n////\n\n#{ns(content-media)} {\n  @include size(100%);\n  @include margin(10v 0);\n  @include display-flex(column, center);\n\n  &__img {\n    @include size(100%);\n    @include relative;\n\n    //le padding permettant de définir le ratio d'aspect est appliqué sur un pseudo-élément before qui hérite de la modification de taille --lg et --sm de l'élément img ou vid\n    @include aspect-ratio();\n\n    img {\n      @extend %media-overlay-cover;\n    }\n  }\n\n  &__caption,\n  &__transcription {\n    @include size(100%);\n    @include margin-top(2v);\n    text-align: right;\n  }\n\n  &__caption {\n    @include text-style(xs);\n  }\n\n  &__transcription {\n    @include nest-link(sm, right, menu-2-fill, null, true);\n  }\n\n  $medias: (#{&}__img, ns(responsive-vid));\n  $captions: (#{&}__caption, #{&}__transcription);\n  @include content-media-sizes($medias, $captions, 25%);\n}\n","////\n/// Core Tools : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  $v: quote($value);\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * 0.25rem;\n  }\n  @else if is-unit($value, w) {\n    @return $q * 0.5rem;\n  }\n  @return unquote($value);\n}\n\n/// Set space property\n///\n/// @param {String} $property [\"margin\"] - propriété à appliquer à l'espacement `[\"margin\", \"padding\"]`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `[\"x\", \"y\", \"top\", \"right\", \"bottom\", \"left\"]`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing(\"margin\", 6v, \"bottom\");\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n\n  @if $direction != null {\n    $v: space($value);\n\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    $spaces: ();\n\n    @each $v in $value {\n      $spaces: append($spaces, space($v));\n    }\n\n    #{$property}: $spaces;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Tools : Global display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n\n%inline-flex-center {\n  @include display-flex(row, center, null, null, true);\n}\n","////\n/// Core Tools : Global pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $display:null, $content:null) {\n  @if $type != after and $type != before {\n    @error '$type must be before or after element';\n  }\n  $pseudo: '::' + quote($type);\n  @at-root #{selector_append(&, $pseudo)} {\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @content;\n  }\n}\n\n@mixin before($display: null, $content: null) {\n  @include _pseudo(before, $display, $content) {\n    @content;\n  }\n}\n\n@mixin after($display: null, $content: null) {\n  @include _pseudo(after, $display, $content) {\n    @content;\n  }\n}\n","////\n/// Core Settings : Medias\n/// @group core\n////\n\n// Ratio\n$ratio-scale: (\n  32x9: 100% * 9 / 32,\n  16x9: 100% * 9 / 16,\n  3x2: 100% * 2 / 3,\n  4x3: 100% * 3 / 4,\n  1x1: 100%,\n  3x4: 100% * 4 / 3,\n  2x3: 100% * 3 / 2\n);\n","////\n/// Core Tools : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} #{px-rem($font-size)} #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin(map-get($settings, margin));\n}\n\n@mixin _space-title($settings) {\n  @include margin(map-get($settings, margin));\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-text($settings);\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-title($settings);\n  }\n}\n","////\n/// Links Tools : link\n/// @group links\n////\n\n@mixin _extend-link($size, $place, $module, $align-on-content, $force-md) {\n  $align: #{$module}-align-on-content;\n\n  @if $size != md or $force-md {\n    @extend %#{$module}--#{$size};\n  }\n\n  @if $place != only {\n    max-width: none;\n    max-height: none;\n  }\n\n  @if $place != null {\n    $placeholder: #{$module}--icon-#{$place};\n\n    @extend %#{$placeholder}--md;\n\n    @if $size != md {\n      @extend %#{$placeholder}--#{$size};\n    }\n  }\n\n  @if $align-on-content {\n\n    @if $place == null {\n      @extend %#{$align}--#{$size};\n    }\n    @else {\n      @extend %#{$align}--#{$place}--#{$size};\n    }\n  }\n}\n\n@mixin _extend-responsive-link($from, $size, $place, $settings, $border-radius, $align-on-content) {\n  $sizes: map_get($settings, sizes);\n  $size-settings: map_get($sizes, $size);\n  @include respond-from($from) {\n\n    @include _build-link-size($size-settings, $border-radius);\n\n    @if $place != only {\n      max-width: none;\n      max-height: none;\n    }\n\n    @if $place == null {\n      @include before(null, none);\n    }\n    @else {\n      @include _build-link-icon($size-settings, $place, $size, false, $place == right);\n    }\n\n    @if $align-on-content {\n      @include _link-align-on-content($size, $place, $size-settings);\n    }\n\n    @content;\n  }\n}\n\n@mixin _nest-link($module, $size, $place: null, $icon: null, $from: null, $align-on-content: false, $settings: $links-settings, $border-radius: true, $force-md: false, $extend-base-link: false) {\n  #{ns($module)} {\n    @if $icon != null {\n      @include font-icon($icon, null);\n    }\n\n    // TODO: quickfix accordions, à revoir\n    @if $extend-base-link {\n      @extend %base-link;\n    }\n\n    @if $from == prevent-extension { // TODO: quickfix, à revoir en éliminant les extends qui perturbent l'ordre des packages\n      @include _extend-link($size, $place, $module, $align-on-content, $force-md);\n      @content;\n    }\n    @else {\n      @include _extend-responsive-link($from, $size, $place, $settings, $border-radius, $align-on-content) {\n        @content;\n      }\n    }\n  }\n}\n\n@mixin nest-link($size:md, $place: null, $icon:null, $from: null,  $align-on-content: false) {\n  @include _nest-link(link, $size, $place, $icon, $from, $align-on-content) {\n    @content;\n  }\n}\n\n@mixin icon-link($size: md, $place: null, $icon: null, $module: null, $align-on-content: false) {\n  @include _extend-link($size, $place, $module, $align-on-content, true);\n  @include font-icon($icon, null);\n}\n","////\n/// Links Tools : sizes\n/// @group links\n////\n\n@mixin _build-link-size($size-settings, $border-radius: false) {\n  $font-size: map_get($size-settings, font-size);\n  $style: get-text-style($font-size);\n  $line-height: space(map_get($style, line-height));\n  font-size: px-rem($font-size);\n  line-height: $line-height;\n\n  $min-height: space(map_get($size-settings, min-height));\n  min-height: $min-height;\n\n  $max-icon-height: icon-size(md);\n\n  @if map_has_key($size-settings, icon-only) {\n    $max-icon-height: icon-size(map_get($size-settings, icon-only));\n  }\n  @else if map_has_key($size-settings, icon) {\n    $max-icon-height: icon-size(map_get($size-settings, icon));\n  }\n\n  $space-y: max($line-height, $max-icon-height);\n  $padding-x: space(map_get($size-settings, padding-x));\n\n  padding: #{($min-height - $space-y) / 2} #{$padding-x};\n\n  @if $border-radius {\n    border-radius: #{$min-height / 2};\n  }\n}\n\n@function _link-icon-margin($size) {\n  @return icon-size($size) / 4;\n}\n\n@mixin _link-align-on-content($size, $place, $size-settings) {\n  $padding-x: space(map_get($size-settings, padding-x));\n  $icon-margin: _link-icon-margin(map_get($size-settings, icon));\n\n  @if $place == null {\n    margin-left: -($padding-x);\n    margin-right: -($padding-x);\n  }\n  @else if $place == left {\n    margin-left: -($padding-x - $icon-margin);\n    margin-right: -($padding-x);\n  }\n  @else if $place == right {\n    margin-left: -($padding-x);\n    margin-right: -($padding-x - $icon-margin);\n  }\n  @else if $place == only {\n    $icon-size: icon-size(map_get($size-settings, icon-only));\n    $min-height: space(map_get($size-settings, min-height));\n    $padding-x: ($min-height - $icon-size) / 2;\n\n    margin-left: -($padding-x);\n    margin-right: -($padding-x);\n  }\n}\n","////\n/// Core Tools : Global units\n/// @group core\n////\n\n/// Retourne la valeur numérique sans unité.\n/// @access public\n/// @param {String} $value - la valeur avec unité\n/// @example\n///   clean-unit(12px);\n@function clean-unit($value) {\n  @if $value == null {\n    @return null;\n  }\n  @return ($value / ($value * 0 + 1));\n}\n\n/// Return rem from px\n///\n/// @param {String} $px - Font size in pixels\n/// @param {String} $root-font-size [$base-font-size-px] - Pixel font size for conversion\n///\n/// @example scss - Get 1rem conversion from 16px, using $base-font-size-px\n///   .foo {\n///     font-size: px-rem(12px);\n///   }\n@function px-rem($px, $root-font-size: 16px) {\n  @return clean-unit($px / $root-font-size) * 1rem;\n}\n\n@function is-unit($value, $unit) {\n  $v: to-lower-case(quote($value));\n  $u: quote($unit);\n  @return str-index($v, $u) == (str-length($v) - str-length($u) + 1);\n}\n\n@function is-basic-unit($value) {\n  $units: em ex '%' px cm mm in pt pc ch rem vw vh vmin vmax;\n  @each $unit in $units {\n    @if is-unit($value, $unit) {\n      @return true;\n    }\n  }\n  @return false;\n}\n","////\n/// Links Tools : icons\n/// @group links\n////\n\n@mixin _build-link-icon($size-settings, $place, $size:md, $font-icon: false, $reverse: false) {\n\n  $icon-size: icon-size(map_get($size-settings, icon));\n\n  @if $place == only {\n    $icon-size: icon-size(map_get($size-settings, icon-only));\n  }\n\n  @if $reverse {\n    flex-direction: row-reverse;\n  }\n  @else {\n    flex-direction: row;\n  }\n\n  $icon-margin: _link-icon-margin(map_get($size-settings, icon));\n  $icon-margin-x: space(map_get($size-settings, icon-margin-x));\n\n  @if $place == left {\n    @include before {\n      margin-left: -($icon-margin);\n      margin-right: $icon-margin-x;\n      font-size: $icon-size;\n    }\n  }\n  @else if $place == right {\n    @include before {\n      margin-right: -($icon-margin);\n      margin-left: $icon-margin-x;\n      font-size: $icon-size;\n    }\n  }\n  @else if $place == only {\n    $min-height: space(map_get($size-settings, min-height));\n    $padding-x: ($min-height - $icon-size) / 2;\n\n    max-width: $min-height;\n    max-height: $min-height;\n    padding-left: $padding-x;\n    padding-right: $padding-x;\n\n    @include before {\n      margin-left: 0;\n      margin-right: $padding-x;\n      font-size: $icon-size;\n    }\n  }\n}\n","////\n/// Core Tools : Icons\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size [\"md\"] - Icon size from `$icon-size-map` (Default to \"md\" = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icons-size(sm);\n///     height: icons-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@mixin custom-icons($icon-size:md) {\n  @include has-icon {\n    @include font-icon(null, $icon-size) {\n      @content;\n    }\n  }\n}\n\n$icons-placeholders-generated: false !global;\n\n@mixin generate-icons-placeholder($icons) {\n  @if $icons-placeholders-generated != true {\n    @at-root {\n      @each $icon, $code in $icons {\n        %#{$icon} {\n          content: \"#{$code}\";\n        }\n      }\n    }\n\n    $icons-placeholders-generated: true !global;\n  }\n}\n\n@mixin generate-icons-content($icons) {\n  @include generate-icons-placeholder($icons-settings);\n  @each $icon, $code in $icons {\n    #{ns('fi-' + $icon)} {\n      @include before {\n        @extend %#{$icon};\n      }\n    }\n  }\n}\n\n@mixin font-icon-content($icon, $prepend: '') {\n  @include generate-icons-placeholder($icons-settings);\n  @if $prepend {\n    content: #{$prepend} \"#{map-get($icons-settings, $icon)}\";\n  }\n  @else {\n    @extend %#{$icon};\n  }\n}\n\n$has-font-icon: false !global;\n@mixin font-icon-placeholder() {\n  @if $has-font-icon != true {\n    @at-root {\n      %font-icon {\n        font-family: icons !important;\n        font-style: normal;\n        font-weight: normal !important;\n        font-variant: normal;\n        text-transform: none;\n        line-height: 1;\n      }\n      $has-font-icon: true !global;\n    }\n  }\n}\n\n@mixin font-icon($icon:null, $icon-size:md, $pseudo:before, $prepend: '') {\n  @include font-icon-placeholder();\n  @include _pseudo($pseudo) {\n    @extend %font-icon;\n\n    @if $icon-size != null {\n      font-size: #{$prepend} icon-size($icon-size);\n    }\n\n    @if $icon != null {\n      @include font-icon-content($icon, $prepend);\n    }\n\n    @content;\n  }\n}\n","////\n/// Content Tools\n/// @group content\n////\n\n@mixin content-media-sizes($medias, $captions, $gap) {\n  @each $size in $content-sizes {\n    $g: $gap;\n\n    @if $size == sm {\n      $g: -$gap;\n    }\n\n    &--#{$size} {\n      #{$medias},\n      #{$captions} {\n        width: #{100% + ($g / 1.5)};\n\n        @include respond-from(md) {\n          width: #{100% + $g};\n        }\n      }\n\n      @if $size == lg {\n        #{$medias} {\n          max-width: 100vw;\n        }\n\n        #{$captions} {\n          max-width: calc(100vw - #{space(8v)});\n        }\n      }\n    }\n  }\n}\n","////\n/// Core Tools : Global breakpoints\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n"]}