{"version":3,"sources":["<no source>","../../../../../src/core/styles/global/tools/_pseudo.scss","../../../navigation.css","../../../../../src/navigation/styles/modules/_nav.scss","../../../../../src/core/styles/reset/tools/_link.scss","../../../../../src/core/styles/reset/tools/_lists.scss","../../../../../src/core/styles/global/misc/z-index/_tools.scss","../../../../../src/core/styles/global/tools/_blocks.scss","../../../../../src/core/styles/global/tools/_display.scss","../../../../../src/core/styles/spacing/tools/_space.scss","../../../../../src/core/styles/spacing/tools/_size.scss","../../../../../src/core/styles/typography/tools/_styles.scss","../../../../../src/core/styles/spacing/tools/_position.scss","../../../../../src/core/styles/icons/_tools.scss","../../../../../src/core/styles/global/functions/_units.scss","../../../../../src/navigation/styles/modules/_menu.scss","../../../../../src/core/styles/global/misc/z-index/_settings.scss","../../../../../src/navigation/styles/modules/_mega-menu.scss","../../../../../src/schemes/styles/tools/_element.scss","../../../../../src/core/styles/global/functions/_strings.scss","../../../../../src/schemes/styles/tools/_hover.scss","../../../../../src/core/styles/global/misc/breakpoints/_tools.scss","../../../../../src/navigation/styles/schemes/_nav.scss"],"names":[],"mappings":"AAAA;;GAAA;ACUU,gBCoJV,CCzJA,QCcE,eAAU,CCDV,eAAU,CCFV,YJRF,CIaM,sCAEE,YJVR,CKKE,cCPE,YAAa,CAIb,qBAAgB,CC+DhB,QNlEiB,CMkEjB,SP1DJ,CKFG,kHJaK,eDSR,CKhBE,cCbE,YAAa,CAIb,qBAAgB,CAIhB,mBAAa,CL0Cb,aDuBJ,CCXE,2BOjEI,UAAO,CDsET,gBNFqB,CQpDvB,cAA6C,CAG3C,kBAA6D,CRmD7D,eDwBJ,CC7BG,uDAYG,iBD4BN,CDvGU,qEAGJ,aAAS,CAIT,UEqEyB,CShF7B,iBAAU,CAER,OAAK,CASL,UAAM,CFTJ,SAAO,CAGP,aAAQ,CDyDR,kBPwDN,CC/BE,cACE,aDkCJ,CC/BE,aKtFE,YAAa,CAQb,kBAAa,CAIb,6BAAiB,CL4EjB,kBDoCJ,CD7HU,mBYyDF,2BAA6B,CAC7B,iBAAkB,CAClB,yBAA8B,CAC9B,mBAAoB,CACpB,mBAAoB,CACpB,aAAc,CAahB,cC1D4C,CD4B9C,WAAqB,CJanB,iBAhCkB,CAgClB,cNoCuB,CACvB,wBD6CN,CD5IU,0CEwGF,yBDsDR,CanKA,STWE,YUHU,CPiER,cA1CoB,CA0CpB,cA1CoB,CC5BlB,URuKN,CI1JM,wCAEE,YJ6JR,CKlKE,eE4DE,QMtDiB,CNsDjB,sBP+HJ,CK3LG,8LQgBK,ebgMR,Ca7NA,uBNuDM,iBAxBkB,CAyBlB,kBP0KN,CD7NU,8BcgCJ,MbiMN,CetOA,cXWE,YUHU,CPiER,kBQvEuB,CRuEvB,cP4KJ,CIrOM,kDAEE,YJwOR,Ce1PA,oBAYI,Yf6PJ,CezQA,8BA0BI,Yf8PJ,CexRA,4BRuDM,iBAxBkB,CAyBlB,kBP2ON,CD9RU,mCgB8BJ,MfoQN,Ce1PE,sBRUI,iBAxBkB,CAyBlB,kBP6PN,CenQE,wBRaI,ePiQN,Ce1QE,oBRSI,qBPqQN,CChQE,2BehBA,iBC8BsG,CD9BtG,+BhB2RF,CgBpTM,+FETF,sCAAc,CACd,wClB0UJ,CgBlUM,sSETF,sCAAc,CACd,wClBiVJ,CgBzUM,kSETF,sCAAc,CACd,wClBwVJ,CgB9TM,uDE3BF,sCAAc,CACd,wClB6VJ,CC5SG,uDehBD,kBhBgUF,CD/WU,qEiB+CR,6BhBoUF,CKrWE,cWiCA,uChB+UF,CenYA,cCoDE,8BhB4VF,Ce1VE,oBCFA,gChBsWF,CmB7YI,wBdAF,cJFI,kBAAmB,CACnB,gBAAiB,CM6DnB,cPnDF,CKTC,6IEkDG,mBPpCJ,CKdC,kHE4DC,YA1CoB,CA0CpB,QN3CuB,CO3BrB,UAAO,CAGP,WAAQ,CP0BJ,iBMDc,CNEd,eDeR,CD3CQ,sMWJR,iBAAU,CAER,QAAK,CAML,QAAQ,CAGR,MAAM,CFTJ,UAAO,CAGP,UAAQ,CDyDR,YPEJ,CKpDC,kRDFD,YJ4DA,CKpDA,cJwCI,eAAgB,CAChB,sBDyBJ,CCvBI,2BACE,oBDyBN,CCpBA,2BQjDA,iBAA6C,CAG3C,kBTiFF,CCXA,aMnBE,6BA1CoB,CNyElB,0BD+BJ,CavIF,SHCE,iBAAU,CAER,QAAK,CH4DH,kBAhCkB,CAgClB,kBPwHJ,CDlLQ,eAGJ,aAAS,CAIT,UcDsB,CHV1B,iBAAU,CAER,KAAK,CAGL,OAAO,CAGP,QAAQ,CAGR,MAAM,CH6DN,uBA1CoB,CHpBtB,UJuLA,CKrLA,eE4DE,gBA1CoB,CC5BlB,WR0MJ,Ca7MF,uBNyEI,mBPkKF,CDtOQ,8BcqCF,MboMN,Ce9OF,cLCE,iBAAU,CAER,QAAK,CAGL,OAAO,CAMP,MAAM,CH6DN,eQlEwB,CRkExB,mBP2LF,CD/PQ,mCAGJ,aAAS,CAIT,UgBKyB,CPXzB,UAAQ,CDiDR,iBAxBkB,CAyBlB,kBAzBkB,CAgClB,kBPoNJ,CenRF,8BA4BM,YfiQJ,Ce7RF,4BRyEI,mBPmOF,CDvSQ,mCgBmCF,MfuQN,CelQA,sBRUI,cQRkB,CRSlB,ePmQJ,CerQA,oBAGI,efgRJ,CoB1TC,mCJqCD,wBC8BsG,CD9BtG,mChB0UA,CDzXQ,eiB+CR,8BhBoVA,CaxYF,uBGoDE,kDhBuVA,CDtYQ,mCiB+CR,mChBiWA,CenWA,wBCEA,iDhB2WA,CAnYF,CkBFE,wCAOI,wIACE,4ElBkTN,CkB/SI,4IACE,8ElBiTN,CACF","file":"navigation.min.css","sourcesContent":[null,"////\n/// Core Tools : Global pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $display:null, $content:null) {\n  @if $type != after and $type != before {\n    @error '$type must be before or after element';\n  }\n  $pseudo: '::' + quote($type);\n  @at-root #{selector_append(&, $pseudo)} {\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @content;\n  }\n}\n\n@mixin before($display: null, $content: null) {\n  @include _pseudo(before, $display, $content) {\n    @content;\n  }\n}\n\n@mixin after($display: null, $content: null) {\n  @include _pseudo(after, $display, $content) {\n    @content;\n  }\n}\n","@charset \"UTF-8\";\n/* ------------------------------------ *\\\n  NAVIGATION\n\\* ------------------------------------ */\n.fr-nav {\n  --is-link: false;\n  --is-list: false;\n  z-index: 3500;\n}\n\n.fr-nav *:focus,\n.fr-nav *:focus-visible {\n  z-index: 4000;\n}\n\n.fr-nav__list {\n  display: flex;\n  flex-direction: column;\n  margin: 0;\n  padding: 0;\n}\n\n@media (min-width: 62em) {\n  .fr-nav__list {\n    flex-direction: row;\n    flex-wrap: nowrap;\n    margin: 0 -1rem;\n  }\n  .fr-nav__list > *:first-child:nth-last-child(2) ~ *,\n  .fr-nav__list > *:first-child:nth-last-child(3) ~ *,\n  .fr-nav__list > *:first-child:nth-last-child(4) ~ * {\n    margin-left: 1.25rem;\n  }\n}\n\n.fr-nav__list > .fr-nav__link,\n.fr-nav__list > .fr-nav__btn,\n.fr-nav__list > * > .fr-nav__link,\n.fr-nav__list > * > .fr-nav__btn {\n  font-weight: bold;\n}\n\n@media (min-width: 62em) {\n  .fr-nav__list > .fr-nav__link,\n  .fr-nav__list > .fr-nav__btn,\n  .fr-nav__list > * > .fr-nav__link,\n  .fr-nav__list > * > .fr-nav__btn {\n    padding: 1rem;\n    margin: 0;\n    width: auto;\n    height: 100%;\n    min-height: 3.5rem;\n    font-weight: normal;\n  }\n  .fr-nav__list > .fr-nav__link[aria-current],\n  .fr-nav__list > .fr-nav__btn[aria-current],\n  .fr-nav__list > * > .fr-nav__link[aria-current],\n  .fr-nav__list > * > .fr-nav__btn[aria-current] {\n    /**\n             * Pour conserver le souligné de selection  par dessus la barre de mega-menu\n             */\n  }\n  .fr-nav__list > .fr-nav__link[aria-current]::before, .fr-nav__list > .fr-nav__btn[aria-current]::before, .fr-nav__list > * > .fr-nav__link[aria-current]::before, .fr-nav__list > * > .fr-nav__btn[aria-current]::before {\n    position: absolute;\n    top: auto;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 2px;\n    margin-top: 0;\n  }\n  .fr-nav__list > .fr-nav__link[aria-current]:not([aria-expanded=\"true\"]),\n  .fr-nav__list > .fr-nav__btn[aria-current]:not([aria-expanded=\"true\"]),\n  .fr-nav__list > * > .fr-nav__link[aria-current]:not([aria-expanded=\"true\"]),\n  .fr-nav__list > * > .fr-nav__btn[aria-current]:not([aria-expanded=\"true\"]) {\n    z-index: 3500;\n  }\n}\n\n.fr-nav__item {\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  flex: 0 1 auto;\n}\n\n@media (min-width: 62em) {\n  .fr-nav__item {\n    box-shadow: none;\n    align-items: flex-start;\n  }\n  .fr-nav__item--align-right {\n    align-items: flex-end;\n  }\n}\n\n.fr-nav__link, .fr-nav__btn {\n  width: 100%;\n  padding: 0.75rem 0;\n  font-size:  1rem ;\n  line-height:  1.5rem ;\n  text-align: left;\n}\n\n@media (min-width: 62em) {\n  .fr-nav__link, .fr-nav__btn {\n    font-size:  0.875rem ;\n    line-height:  1.5rem ;\n  }\n}\n\n.fr-nav__link[aria-current], .fr-nav__btn[aria-current] {\n  position: relative;\n}\n\n.fr-nav__link[aria-current]::before, .fr-nav__btn[aria-current]::before {\n  display: block;\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: -1rem;\n  width: 2px;\n  height: 1.5rem;\n  margin-top: -0.75rem;\n}\n\n.fr-nav__link {\n  display: block;\n}\n\n.fr-nav__btn {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: row;\n}\n\n@media (min-width: 62em) {\n  .fr-nav__btn {\n    padding: 1rem 0.75rem 1rem 1rem;\n  }\n}\n\n.fr-nav__btn::after {\n  font-family: icons !important;\n  font-style: normal;\n  font-weight: normal !important;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n}\n\n.fr-nav__btn::after {\n  font-size:  1rem;\n  content:  \"\";\n  margin-left: 0.5rem;\n  margin-right: 0;\n  transition: transform 0.3s;\n}\n\n@media (min-width: 62em) {\n  .fr-nav__btn {\n    justify-content: flex-start;\n  }\n}\n\n.fr-nav__btn[aria-expanded=\"true\" i]::before {\n  transform: rotate(-180deg);\n}\n\n.fr-menu {\n  z-index: 2500;\n  margin: 0 -1rem;\n  padding: 0 1rem;\n  width: auto;\n}\n\n.fr-menu *:focus,\n.fr-menu *:focus-visible {\n  z-index: 3000;\n}\n\n@media (min-width: 62em) {\n  .fr-menu {\n    position: absolute;\n    top: 100%;\n    margin-top: -0.25rem;\n    padding-top: 0.25rem;\n  }\n  .fr-menu::after {\n    display: block;\n    content: \"\";\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    margin: 0.25rem 1rem 2rem;\n    z-index: -1;\n  }\n}\n\n.fr-menu__list {\n  margin: 0;\n  padding: 0.5rem 0 1.5rem;\n}\n\n@media (min-width: 62em) {\n  .fr-menu__list {\n    padding: 0 0 2rem;\n  }\n}\n\n@media (min-width: 62em) {\n  .fr-menu__list {\n    width: 20rem;\n  }\n}\n\n.fr-menu__list > *:first-child,\n.fr-menu__list > *:first-child > .fr-nav__link,\n.fr-menu__list > *:hover,\n.fr-menu__list > *:hover > .fr-nav__link,\n.fr-menu__list > *:hover + *,\n.fr-menu__list > *:hover + * > .fr-nav__link {\n  box-shadow: none;\n}\n\n.fr-menu .fr-nav__link {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n\n.fr-menu .fr-nav__link::before {\n  left: 0;\n}\n\n@media (min-width: 62em) {\n  .fr-menu .fr-nav__link {\n    padding: 0.75rem 1rem;\n  }\n  .fr-menu .fr-nav__link::before {\n    left: 0;\n  }\n}\n\n.fr-mega-menu {\n  z-index: 2500;\n  margin: 0 -1rem 1px;\n  padding: 0 1rem;\n}\n\n.fr-mega-menu *:focus,\n.fr-mega-menu *:focus-visible {\n  z-index: 3000;\n}\n\n@media (min-width: 62em) {\n  .fr-mega-menu {\n    position: absolute;\n    top: 100%;\n    right: 0;\n    left: 0;\n    margin: -2px 0 0;\n    padding: 0 0 2.25rem;\n  }\n}\n\n.fr-mega-menu:focus {\n  outline: none;\n}\n\n@media (min-width: 62em) {\n  .fr-mega-menu > .fr-container::before {\n    display: block;\n    content: \"\";\n    height: 2px;\n    margin-left: -1rem;\n    margin-right: -1rem;\n    margin-bottom: 1rem;\n  }\n}\n\n.fr-mega-menu .fr-link--close {\n  display: none;\n}\n\n@media (min-width: 62em) {\n  .fr-mega-menu .fr-link--close {\n    display: flex;\n  }\n}\n\n.fr-mega-menu .fr-nav__link {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n\n.fr-mega-menu .fr-nav__link::before {\n  left: 0;\n}\n\n@media (min-width: 62em) {\n  .fr-mega-menu .fr-nav__link {\n    padding: 0.75rem 1rem;\n  }\n  .fr-mega-menu .fr-nav__link::before {\n    left: 0;\n  }\n}\n\n.fr-mega-menu__leader {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n\n@media (min-width: 62em) {\n  .fr-mega-menu__leader {\n    padding-left: 0;\n    padding-right: 0;\n  }\n}\n\n.fr-mega-menu__category {\n  margin-bottom: 0;\n}\n\n.fr-mega-menu__list {\n  padding-bottom: 0.75rem;\n}\n\n@media (min-width: 62em) {\n  .fr-mega-menu__list {\n    box-shadow: none;\n  }\n}\n\n.fr-nav__link, .fr-nav__btn {\n  color: var(--g800);\n  background-color: var(--t-plain);\n}\n\n@media (hover: hover) and (pointer: fine) {\n  .fr-nav__link:not(a):not(:disabled):hover, a.fr-nav__link[href]:hover, a.fr-nav__btn[href]:hover, .fr-nav__btn:not(a):not(:disabled):hover {\n    background-image: linear-gradient(0deg, var(--color-hover), var(--color-hover));\n  }\n  .fr-nav__link:not(a):not(:disabled):active, a.fr-nav__link[href]:active, a.fr-nav__btn[href]:active, .fr-nav__btn:not(a):not(:disabled):active {\n    background-image: linear-gradient(0deg, var(--color-active), var(--color-active));\n  }\n}\n\n:root:not([data-fr-theme=\"dark\" i]) .fr-nav__link, :root:not([data-fr-theme=\"dark\" i]) .fr-nav__btn {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n:root:not([data-fr-theme=\"dark\" i]) [class*=\"fr-scheme-light\"] .fr-nav__link, :root:not([data-fr-theme=\"dark\" i]) [class*=\"fr-scheme-light\"] .fr-nav__btn,\n:root:not([data-fr-theme=\"dark\" i]) [class*=\"--scheme-light-\"] .fr-nav__link,\n:root:not([data-fr-theme=\"dark\" i]) [class*=\"--scheme-light-\"] .fr-nav__btn {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n:root:not([data-fr-theme=\"dark\" i]) [class*=\"fr-scheme-dark\"] .fr-nav__link, :root:not([data-fr-theme=\"dark\" i]) [class*=\"fr-scheme-dark\"] .fr-nav__btn,\n:root:not([data-fr-theme=\"dark\" i]) [class*=\"--scheme-dark-\"] .fr-nav__link,\n:root:not([data-fr-theme=\"dark\" i]) [class*=\"--scheme-dark-\"] .fr-nav__btn {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n:root[data-fr-theme=\"dark\" i] .fr-nav__link, .fr-nav__btn {\n  --color-hover: var(--block-color-hover);\n  --color-active: var(--block-color-active);\n}\n\n.fr-nav__link[aria-current], .fr-nav__btn[aria-current] {\n  color: var(--bf500);\n}\n\n.fr-nav__link[aria-current]::before, .fr-nav__btn[aria-current]::before {\n  background-color: var(--bf500);\n}\n\n@media (min-width: 62em) {\n  .fr-nav__btn[aria-expanded=\"true\" i] {\n    color: var(--bf500-plain);\n    background-color: var(--bf200-bf300);\n  }\n}\n\n.fr-nav__item {\n  box-shadow: inset 0 -1px 0 0 var(--g300);\n}\n\n@media (min-width: 62em) {\n  .fr-menu::after {\n    background-color: var(--w-g750);\n  }\n  .fr-menu .fr-nav__link {\n    box-shadow: 0 calc(-1rem - 1px) 0 -1rem var(--g300);\n  }\n}\n\n.fr-mega-menu {\n  background-color: var(--w-g750);\n}\n\n@media (min-width: 62em) {\n  .fr-mega-menu > .fr-container::before {\n    background-color: var(--bf200-bf300);\n  }\n}\n\n.fr-mega-menu__list {\n  box-shadow: 0 1px 0 0 var(--g300);\n}\n\n@media (min-width: 62em) {\n  .fr-mega-menu__category {\n    box-shadow: 0 calc(1rem + 1px) 0 -1rem var(--g300);\n  }\n}\n","////\n/// Navigation Module : Nav\n/// @group navigation\n////\n\n#{ns(nav)} {\n  @include disable-link-style;\n  @include disable-list-style;\n  @include z-index(nav, true);\n\n  @include list {\n    @include display-flex(column);\n    @include margin(0);\n    @include padding(0);\n\n    @include respond-from(lg) {\n      flex-direction: row;\n      flex-wrap: nowrap;\n      @include margin(0 -4v);\n\n      & > *:first-child:nth-last-child(2) ~ *,\n      & > *:first-child:nth-last-child(3) ~ *,\n      & > *:first-child:nth-last-child(4) ~ * {\n        @include margin-left(5v);\n      }\n    }\n\n    &,\n    & > * {\n      & > #{ns(nav__link)},\n      & > #{ns(nav__btn)} {\n        font-weight: bold;\n\n        @include respond-from(lg) {\n          @include padding(4v);\n          @include margin(0);\n          @include size(auto, 100%);\n          min-height: space(14v);\n          font-weight: normal;\n\n          &[aria-current] {\n            @include before {\n              @include absolute(auto, null, 0, 0, 100%, 2px);\n              @include margin-top(0);\n            }\n\n            /**\n             * Pour conserver le souligné de selection  par dessus la barre de mega-menu\n             */\n            &:not([aria-expanded=\"true\"]) {\n              @include z-index(nav);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  @include list-item {\n    // TODO: supprimer la stylisation de la liste item, trouver une solution différente pour l'affichage du menu à droite et la barre d'espacement grise en mobile\n    @include display-flex(column, stretch);\n    flex: 0 1 auto;\n\n    @include respond-from(lg) {\n      box-shadow: none;\n      align-items: flex-start;\n\n      &--align-right {\n        align-items: flex-end;\n      }\n    }\n  }\n\n  &__link,\n  &__btn {\n    @include size(100%);\n    @include padding(3v 0);\n    @include text-style(md);\n    text-align: left;\n\n    @include respond-from(lg) {\n      @include text-style(sm);\n    }\n\n    &[aria-current] {\n      position: relative;\n      @include before(block, '') {\n        @include absolute(50%, null, null, -4v, 2px, 6v);\n        @include margin-top(-3v);\n      }\n    }\n  }\n\n  &__link {\n    display: block;\n  }\n\n  &__btn {\n    @include display-flex(null, center, space-between);\n    flex-direction: row;\n    @include padding(4v 3v 4v 4v, lg);\n\n    @include font-icon(arrow-down-s-line, sm, after) {\n      @include margin-left(2v);\n      @include margin-right(0);\n      transition: transform 0.3s;\n    }\n\n    @include respond-from(lg) {\n      justify-content: flex-start;\n    }\n\n    &[aria-expanded=\"true\" i] {\n      @include before {\n        transform: rotate(-180deg);\n      }\n    }\n  }\n}\n","////\n/// Core Tools : Reset\n/// @group core\n////\n\n%a-reset {\n  text-decoration: none;\n  color: inherit;\n}\n\n@mixin link-underline($prepend: '') {\n  box-shadow: #{$prepend} 0 1px 0 0 currentColor;\n}\n\n@mixin enable-link-style() {\n  --is-link: ;\n}\n\n@mixin disable-link-style() {\n  --is-link: false;\n}\n\n@mixin enlarge-link {\n  outline-width: 0 !important;\n  @include before(block, '') {\n    @include absolute(0, 0, 0, 0, 100%, 100%);\n    outline-offset: 2px;\n    outline-style: inherit;\n    outline-color: inherit;\n    outline-width: 2px;\n    @include z-index(over);\n  }\n}\n","////\n/// Core Tools : Reset list\n/// @group core\n////\n\n%list-reset {\n  list-style-type: none;\n  margin-block-start: 0;\n  margin-block-end: 0;\n  padding-inline-start: 0;\n  padding-inline-end: 0;\n}\n\n@mixin enable-list-style() {\n  --is-list: ;\n}\n\n@mixin disable-list-style() {\n  --is-list: false;\n}\n\n@mixin remove-list-style($nested: false) {\n  @include padding-bottom(0);\n\n  & > li {\n    @include padding-bottom(0);\n    @include before(none, none) {\n      font-size: inherit;\n      font-weight: inherit;\n    }\n\n    @if $nested {\n      & > ol,\n      & > ul {\n        @include padding-top(0);\n        @include padding-left(0);\n\n        & > li {\n          @include text-style(md);\n          @include before {\n            @include padding-right(0);\n            font-size: inherit;\n          }\n        }\n      }\n    }\n  }\n}\n","////\n/// Core Tools : Global z-index\n/// @group core\n////\n\n/// Fonction de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@function z-index($index-name) {\n  @return map-get($z-indexes, $index-name);\n}\n\n/// Mixin de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@mixin z-index($index-name, $focus: false) {\n  z-index: z-index($index-name);\n  @if $focus {\n    $focus-z-index: z-index($index-name + '-focus');\n\n    @if $focus-z-index != null {\n      *:focus,\n      *:focus-visible {\n        z-index: #{$focus-z-index};\n      }\n    }\n  }\n}\n","////\n/// Core Tools : Global list\n/// @group core\n////\n\n@mixin title() {\n  &__title {\n    @content;\n  }\n}\n\n@mixin body() {\n  &__body {\n    @content;\n  }\n}\n\n@mixin list() {\n  &__list {\n    @content;\n  }\n}\n\n@mixin list-item() {\n  &__item {\n    @content;\n  }\n}\n","////\n/// Core Tools : Global display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n\n%inline-flex-center {\n  @include display-flex(row, center, null, null, true);\n}\n","////\n/// Core Tools : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  $v: quote($value);\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * 0.25rem;\n  }\n  @else if is-unit($value, w) {\n    @return $q * 0.5rem;\n  }\n  @return unquote($value);\n}\n\n/// Set space property\n///\n/// @param {String} $property [\"margin\"] - propriété à appliquer à l'espacement `[\"margin\", \"padding\"]`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `[\"x\", \"y\", \"top\", \"right\", \"bottom\", \"left\"]`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing(\"margin\", 6v, \"bottom\");\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n\n  @if $direction != null {\n    $v: space($value);\n\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    $spaces: ();\n\n    @each $v in $value {\n      $spaces: append($spaces, space($v));\n    }\n\n    #{$property}: $spaces;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Tools : Global size\n/// @group core\n////\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Core Tools : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} #{px-rem($font-size)} #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin(map-get($settings, margin));\n}\n\n@mixin _space-title($settings) {\n  @include margin(map-get($settings, margin));\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-text($settings);\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-title($settings);\n  }\n}\n","////\n/// Core Tools : Global position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n","////\n/// Core Tools : Icons\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size [\"md\"] - Icon size from `$icon-size-map` (Default to \"md\" = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icons-size(sm);\n///     height: icons-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@mixin custom-icons($icon-size:md) {\n  @include has-icon {\n    @include font-icon(null, $icon-size) {\n      @content;\n    }\n  }\n}\n\n$icons-placeholders-generated: false !global;\n\n@mixin generate-icons-placeholder($icons) {\n  @if $icons-placeholders-generated != true {\n    @at-root {\n      @each $icon, $code in $icons {\n        %#{$icon} {\n          content: \"#{$code}\";\n        }\n      }\n    }\n\n    $icons-placeholders-generated: true !global;\n  }\n}\n\n@mixin generate-icons-content($icons) {\n  @include generate-icons-placeholder($icons-settings);\n  @each $icon, $code in $icons {\n    #{ns('fi-' + $icon)} {\n      @include before {\n        @extend %#{$icon};\n      }\n    }\n  }\n}\n\n@mixin font-icon-content($icon, $prepend: '') {\n  @include generate-icons-placeholder($icons-settings);\n  @if $prepend {\n    content: #{$prepend} \"#{map-get($icons-settings, $icon)}\";\n  }\n  @else {\n    @extend %#{$icon};\n  }\n}\n\n$has-font-icon: false !global;\n@mixin font-icon-placeholder() {\n  @if $has-font-icon != true {\n    @at-root {\n      %font-icon {\n        font-family: icons !important;\n        font-style: normal;\n        font-weight: normal !important;\n        font-variant: normal;\n        text-transform: none;\n        line-height: 1;\n      }\n      $has-font-icon: true !global;\n    }\n  }\n}\n\n@mixin font-icon($icon:null, $icon-size:md, $pseudo:before, $prepend: '') {\n  @include font-icon-placeholder();\n  @include _pseudo($pseudo) {\n    @extend %font-icon;\n\n    @if $icon-size != null {\n      font-size: #{$prepend} icon-size($icon-size);\n    }\n\n    @if $icon != null {\n      @include font-icon-content($icon, $prepend);\n    }\n\n    @content;\n  }\n}\n","////\n/// Core Tools : Global units\n/// @group core\n////\n\n/// Retourne la valeur numérique sans unité.\n/// @access public\n/// @param {String} $value - la valeur avec unité\n/// @example\n///   clean-unit(12px);\n@function clean-unit($value) {\n  @if $value == null {\n    @return null;\n  }\n  @return ($value / ($value * 0 + 1));\n}\n\n/// Return rem from px\n///\n/// @param {String} $px - Font size in pixels\n/// @param {String} $root-font-size [$base-font-size-px] - Pixel font size for conversion\n///\n/// @example scss - Get 1rem conversion from 16px, using $base-font-size-px\n///   .foo {\n///     font-size: px-rem(12px);\n///   }\n@function px-rem($px, $root-font-size: 16px) {\n  @return clean-unit($px / $root-font-size) * 1rem;\n}\n\n@function is-unit($value, $unit) {\n  $v: to-lower-case(quote($value));\n  $u: quote($unit);\n  @return str-index($v, $u) == (str-length($v) - str-length($u) + 1);\n}\n\n@function is-basic-unit($value) {\n  $units: em ex '%' px cm mm in pt pc ch rem vw vh vmin vmax;\n  @each $unit in $units {\n    @if is-unit($value, $unit) {\n      @return true;\n    }\n  }\n  @return false;\n}\n","////\n/// Navigation Module : Menu\n/// @group navigation\n////\n\n#{ns(menu)} {\n  @include z-index(menu, true);\n  @include margin(0 -4v);\n  @include padding(0 4v);\n  @include size(auto);\n\n  @include respond-from(lg) {\n    @include absolute(100%);\n    @include margin-top(-1v);\n    @include padding-top(1v);\n\n    @include after(block, '') {\n      @include absolute(0,0,0,0);\n      @include margin(1v 4v 8v);\n      @include z-index(under);\n    }\n  }\n\n  @include list {\n    @include margin(0);\n    @include padding(2v 0 6v);\n    @include padding(0 0 8v, lg);\n    @include size(80v, null, lg);\n\n    & > *:first-child,\n    & > *:hover,\n    & > *:hover + * {\n      &,\n      & > #{ns(nav__link)} {\n        box-shadow: none;\n      }\n    }\n  }\n\n  #{ns(nav__link)} {\n    @include padding-x(4v);\n    @include before {\n      left: 0;\n    }\n    @include respond-from(lg) {\n      @include padding(3v 4v);\n      @include before {\n        left: 0;\n      }\n    }\n  }\n}\n","////\n/// Core Settings : z-index\n/// @group core\n////\n\n/// Liste des z-index présent dans le DS\n/// @type map\n$z-indexes: (\n  auto: auto,\n  under: -1,\n  base: 0,\n  over: 1,\n  focus: 2000,\n  menu: 2500,\n  menu-focus: 3000,\n  nav: 3500,\n  nav-focus: 4000,\n  modal: 4500,\n  modal-focus: 5000,\n  modal-footer: 5500,\n  modal-footer-focus: 6000,\n);\n","////\n/// Navigation Module : Mega menu\n/// @group navigation\n////\n\n#{ns(mega-menu)} {\n  @include z-index(menu, true);\n  @include margin(0 -4v 1px);\n  @include padding(0 4v);\n\n  @include respond-from(lg) {\n    @include absolute(100%, 0, null, 0);\n    @include margin(-2px 0 0);\n    @include padding(0 0 9v);\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  > #{ns(container)} {\n    @include respond-from(lg) {\n      @include before(block, '') {\n        @include size(null, 2px);\n        @include margin-x(-4v);\n        @include margin-bottom(4v);\n      }\n    }\n  }\n\n  #{ns(link--close)} {\n    display: none;\n    @include respond-from(lg) {\n      display: flex;\n    }\n  }\n\n  #{ns(nav__link)} {\n    @include padding-x(4v);\n    @include before {\n      left: 0;\n    }\n    @include respond-from(lg) {\n      @include padding(3v 4v);\n      @include before {\n        left: 0;\n      }\n    }\n  }\n\n  &__leader {\n    @include padding-x(4v);\n    @include padding-x(0, lg);\n  }\n\n  &__category {\n    @include margin-bottom(0);\n  }\n\n  &__list {\n    @include padding-bottom(3v);\n    @include respond-from(lg) {\n      box-shadow: none;\n    }\n  }\n}\n","////\n/// Schemes Module : Element\n/// @group schemes\n////\n\n/// map des transitions par élément\n/// @type map\n$scheme-elements-transitions:() !global;\n\n/// Ajout d'une combinaison de couleur sur un élément pour un propriété donnée\n/// @access private\n/// @param {String} $set-name - nom de la combinaison comme défini dans settings/sets\n/// @@param {String} $prop - propriété affectée\n/// @param {Bool | String} $transition - objet auqel la transition de couleur est associée\n/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)\n/// @param {String | list}  $value - la valeur appliquée à la propriété. la variable $COLOR est remplacée par la custom property de la combinaison de couleur\n/// @param {String}  $element - le sélécteur de l'élément\n\n@mixin _scheme-element($set-name, $prop, $transition:false, $hover:false, $value:$COLOR, $element:&) {\n  // hover\n  @if $hover != false {\n    $set: map_get($scheme-sets, $set-name);\n    $light: _scheme-set-color($set, light);\n    $dark: _scheme-set-color($set, dark);\n\n    @at-root {\n      @if $hover != override {\n        #{$element} {\n          @include _scheme-element-hover();\n        }\n      }\n\n      #{$not-dark-theme-selector} {\n        #{$element} {\n          @include _get-hover-vars($light);\n        }\n\n        $i: 0;\n        @each $type, $variation in $scheme-blocks {\n          $i: ($i + 1);\n\n          [class*=\"#{$base-scheme}-#{$type}\"],\n          [class*=\"--scheme-#{$type}-\"] {\n            #{$element} {\n              @include _get-hover-vars(_scheme-set-color($set, $type));\n            }\n          }\n        }\n      }\n\n      #{$dark-theme-selector} #{$element} {\n        @include _get-hover-vars($dark);\n      }\n    }\n  }\n\n  // le $COLOR de la valeur est remplacé par la custom property de la couleur\n  #{$prop}: _replace_color($value, var(--#{$set-name}), false);\n\n  // transitions\n  @if $transition != false and $theme-allow-transition != false {\n    @if $transition == true {\n      $transition: $element;\n    }\n\n    $transitions:map_get($scheme-elements-transitions, $transition);\n    @if $transitions == null {\n      $transitions:();\n    }\n\n    $transitions:append($transitions, $prop $theme-transition-duration, $separator: comma);\n    $scheme-elements-transitions:map_merge($scheme-elements-transitions, ($transition:$transitions)) !global;\n\n    @include _theme-transition() {\n      transition: $transitions;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String} $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)\n@mixin scheme-element-bg-color($set-name, $transition:false, $hover:false) {\n  @include _scheme-element($set-name, background-color, $transition, $hover);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n@mixin scheme-element-text-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, color, $transition);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n@mixin scheme-element-fill-color($set-name, $transition:false) {\n  @include _scheme-element($set-name, fill, $transition);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {String} $side - le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($set-name, $transition:false, $side:null, $value:1px solid $COLOR) {\n  $prop:border;\n  @if $side != null {\n    $prop:border-#{$side};\n  }\n  @include _scheme-element($set-name, $prop, $transition, false, $value);\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($set-name, $transition:false, $value:1px solid $COLOR) {\n  @include _scheme-element($set-name, outline, $transition, false, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets\n/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($set-name, $transition:false, $value:inset 0 0 0 1px $COLOR) {\n  @include _scheme-element($set-name, box-shadow, $transition, false, $value);\n}\n","////\n/// Core Tools : Global strings\n/// @group core\n////\n\n@function _pow10($exponent) {\n  @if $exponent == 0 {\n    @return 1;\n  }\n  $result: 1;\n  @for $i from 1 through $exponent {\n    $result: $result * 10;\n  }\n  @return $result;\n}\n\n/// Fonction de transformation d'une string en nombre intégral\n/// @access public\n/// @param {String} $value - le nombre en chaîne de caractères\n@function str-to-num($value) {\n  $length: str-length($value);\n  $int: ();\n  $float: ();\n  $floating: false;\n  $neg: false;\n\n  @for $i from 1 through $length {\n    $n: str-slice($value, $i, $i);\n\n    @if $n == '.' {\n      $floating: true;\n    }\n    @else if $n == '-' {\n      $neg: true;\n    }\n    @else {\n      @for $d from 0 through 9 {\n        @if quote($d) == $n {\n          @if $floating {\n            $float: append($float, $d);\n          }\n          @else {\n            $int: append($int, $d);\n          }\n        }\n      }\n    }\n  }\n\n  $result: 0;\n\n  $length: length($int);\n  @if $length > 0 {\n    @for $i from 1 through $length {\n      $result: $result + (nth($int, $i) * _pow10($length - $i));\n    }\n  }\n\n  $length: length($float);\n  @if $length > 0 {\n    @for $i from 1 through $length {\n      $result: $result + (nth($float, $i) / _pow10($i));\n    }\n  }\n\n  @if $neg {\n    @return -$result;\n  }\n  @else {\n    @return $result;\n  }\n}\n\n/// Remplacement dans une chaine de caractères\n/// @access public\n/// @param {String} $stack - chaine de caractère où chercher\n/// @param {String} $needle - élément à chercher\n/// @param {String} $content - élément de remplacement\n/// @return {String} la chaîne de caractères transformée\n@function str-replace($stack, $needle, $content) {\n  $is:quote($stack);\n  $in:quote($needle);\n  $ic:quote($content);\n\n  $i:str-index($is, $in);\n\n  @while $i != null {\n    $is:unquote(str_slice($is, 1, $i - 1) + $ic + str_slice($is, $i + str-length($in), str_length($is)));\n    $i:str-index($is, $in);\n  }\n\n  @return unquote($is);\n}\n\n/// Découpage d'une chaine de caractères avec un séparateur particulier\n/// @access public\n/// @param {String} $string - chaine de caractère à découper\n/// @param {String} $separator - séparateur\n@function str-split($string, $separator:',') {\n  $tmp: str-slice($string, 1);\n  $list: ();\n  $index: str-index($string, $separator);\n\n  @if $index == null {\n    $list: ($string);\n  }\n  @else {\n    $list: join((str-slice($string, 1, $index - 1)), str-split(str-slice($string, $index + 1), $separator));\n  }\n  @return $list;\n}\n","////\n/// Schemes Module : Hover\n/// @group schemes\n////\n\n/// Définit les couleurs d'hover\n/// @access private\n/// @param {Color} $color - couleur de l'élément\n/// @param {Bool} $is-block - est-ce que cette définition se fait au niveau d'un block de combinaison ?\n@mixin _get-hover-vars($color, $is-block: false) {\n\n  @if opacity($color) != 0 {\n\n    $prop: color;\n\n    @if $is-block {\n      $prop: block-color;\n    }\n\n    --#{$prop}-hover: #{ _overlay-color($color, 1) };\n    --#{$prop}-active: #{ _overlay-color($color, 2) };\n  }\n  @else {\n    --color-hover: var(--block-color-hover);\n    --color-active: var(--block-color-active);\n  }\n}\n\n/// Applique le hover sur un élément\n/// @access private\n@mixin _scheme-element-hover() {\n  @media (hover: hover) and (pointer: fine) {\n    $selectors: ('&:not(a):not(:disabled)');\n    $a: selector-associate(&, 'a[href]');\n    @if length($a) {\n      $selectors: append($selectors, $a, 'comma');\n    }\n    @at-root #{$selectors} {\n      &:hover {\n        background-image: linear-gradient(0deg, var(--color-hover), var(--color-hover));\n      }\n\n      &:active {\n        background-image: linear-gradient(0deg, var(--color-active), var(--color-active));\n      }\n    }\n  }\n}\n\n@mixin remove-hover() {\n  &:hover,\n  &:active {\n    &:not([disabled]),\n    &:not(:disabled) {\n      background-image: none;\n    }\n  }\n}\n","////\n/// Core Tools : Global breakpoints\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `[\"xs\", \"sm\", \"md\", \"lg\", \"xl\"]`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n","////\n/// Navigation Schemes : Nav\n/// @group navigation\n////\n\n#{ns(nav)} {\n  &__link,\n  &__btn {\n    @include scheme-element-text-color(g800);\n    @include scheme-element-bg-color(t-plain, true, true);\n\n    &[aria-current] {\n      @include scheme-element-text-color(bf500);\n\n      @include before {\n        @include scheme-element-bg-color(bf500);\n      }\n    }\n  }\n\n  &__btn {\n    &[aria-expanded=\"true\" i] {\n      @include respond-from(lg) {\n        @include scheme-element-text-color(bf500-plain);\n        @include scheme-element-bg-color(bf200-bf300);\n      }\n    }\n  }\n\n  @include list-item {\n    @include scheme-element-box-shadow-color(g300, true, inset 0 -1px 0 0 $COLOR);\n  }\n}\n"]}